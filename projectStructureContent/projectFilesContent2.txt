File: eslint.config.js
Content:
import globals from "globals";
import pluginJs from "@eslint/js";
import prettierPlugin from "eslint-plugin-prettier";
import prettierConfig from "eslint-config-prettier";


/** @type {import('eslint').Linter.Config[]} */
export default [
  {
    languageOptions: { globals: globals.node },
    plugins: { prettier: prettierPlugin },
    rules: {
      ...prettierConfig.rules, // تطبيق قواعد Prettier
      "semi": ["error", "always"], // ضع ; بعد كل تعبير
      "no-console": "off", // السماح باستخدام console.log
      "global-require": "error", // خطأ إذا استخدمت require خارج top-level
      "no-process-exit": "error", // خطأ إذا استخدمت process.exit
    },
  },
  pluginJs.configs.recommended,
];

||------------------------------------------------------||

File: package-lock.json
Content:
{
  "name": "backend-platform",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "backend-platform",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "dotenv": "^16.4.7",
        "joi": "^17.13.3"
      },
      "devDependencies": {
        "@eslint/js": "^9.19.0",
        "eslint": "^9.19.0",
        "eslint-config-prettier": "^10.0.1",
        "eslint-plugin-prettier": "^5.2.3",
        "globals": "^15.14.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.1.tgz",
      "integrity": "sha512-s3O3waFUrMV8P/XaF/+ZTp1X9XBZW1a4B97ZnjQF2KYWaFD2A8KyFBsrsfSjEmjn3RGWAIuvlneuZm3CUK3jbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.19.1.tgz",
      "integrity": "sha512-fo6Mtm5mWyKjA/Chy1BYTdn5mGJoDNjC7C64ug20ADsRDGrA85bN3uK3MaKbeRkRuuIEAR5N33Jr1pbm411/PA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.5",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.10.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.10.0.tgz",
      "integrity": "sha512-gFHJ+xBOo4G3WRlR1e/3G8A6/KZAH6zcE/hkLRCZTi/B9avAG365QhFA8uOGzTMqgTghpn7/fSnscW++dpMSAw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.2.0.tgz",
      "integrity": "sha512-grOjVNN8P3hjJn/eIETF1wwd12DdnwFDoyceUJLYYdkpbwq3nLi+4fqrTAONx7XDALqlL220wC/RHSC/QTI/0w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.19.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.19.0.tgz",
      "integrity": "sha512-rbq9/g38qjfqFLOVPvwjIvFFdNziEC5S65jmjPw5r6A//QH+W91akh9irMwjDN8zKUTak6W9EsAv4m/7Wnw0UQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.5.tgz",
      "integrity": "sha512-o0bhxnL89h5Bae5T318nFoFzGy+YE5i/gGkoPAgkmTVdRKTiv3p8JHevPiPaMwoloKfEiiaHlawCqaZMqRm+XQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.5.tgz",
      "integrity": "sha512-lB05FkqEdUg2AA0xEbUz0SnkXT1LcCTa438W4IWTUh4hdOnVbQyOJ81OrDXsJk/LSiJHubgGEFoR5EHq1NsH1A==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.10.0",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.1.tgz",
      "integrity": "sha512-c7hNEllBlenFTHBky65mhq8WD2kbN9Q6gk0bTk8lSBvc554jpXSkST1iePudpt7+A/AQvuHs9EMqjHDXMY1lrA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@pkgr/core": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/@pkgr/core/-/core-0.1.1.tgz",
      "integrity": "sha512-cq8o4cWH0ibXh9VGi5P20Tu9XF/0fFXl9EUinr9QfTM7a7p0oTA4iJRCQWppXR1Pg8dSM0UCItCkPwsk9qWWYA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.20.0 || ^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/unts"
      }
    },
    "node_modules/@sideway/address": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.5.tgz",
      "integrity": "sha512-IqO/DUQHUkPeixNQ8n0JA6102hT9CmaljNTPmQ1u8MEhBo/R4Q8eKLN/vGZxuebwOroDB4cbpjheD4+/sKFK4Q==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@types/estree": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz",
      "integrity": "sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/acorn": {
      "version": "8.14.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.0.tgz",
      "integrity": "sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/debug": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/dotenv": {
      "version": "16.4.7",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.19.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.19.0.tgz",
      "integrity": "sha512-ug92j0LepKlbbEv6hD911THhoRHmbdXt2gX+VDABAW/Ir7D3nqKdv5Pf5vtlyY6HQMTEP2skXY43ueqTCWssEA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.19.0",
        "@eslint/core": "^0.10.0",
        "@eslint/eslintrc": "^3.2.0",
        "@eslint/js": "9.19.0",
        "@eslint/plugin-kit": "^0.2.5",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.1",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.2.0",
        "eslint-visitor-keys": "^4.2.0",
        "espree": "^10.3.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-config-prettier": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-10.0.1.tgz",
      "integrity": "sha512-lZBts941cyJyeaooiKxAtzoPHTN+GbQTJFAIdQbRhA4/8whaAraEh47Whw/ZFfrjNSnlAxqfm9i0XVAEkULjCw==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "eslint-config-prettier": "build/bin/cli.js"
      },
      "peerDependencies": {
        "eslint": ">=7.0.0"
      }
    },
    "node_modules/eslint-plugin-prettier": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/eslint-plugin-prettier/-/eslint-plugin-prettier-5.2.3.tgz",
      "integrity": "sha512-qJ+y0FfCp/mQYQ/vWQ3s7eUlFEL4PyKfAJxsnYTJ4YT73nsJBWqmEpFryxV9OeUiqmsTsYJ5Y+KDNaeP31wrRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prettier-linter-helpers": "^1.0.0",
        "synckit": "^0.9.1"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint-plugin-prettier"
      },
      "peerDependencies": {
        "@types/eslint": ">=8.0.0",
        "eslint": ">=8.0.0",
        "eslint-config-prettier": "*",
        "prettier": ">=3.0.0"
      },
      "peerDependenciesMeta": {
        "@types/eslint": {
          "optional": true
        },
        "eslint-config-prettier": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.2.0.tgz",
      "integrity": "sha512-PHlWUfG6lvPc3yvP5A4PNyBL1W8fkDUccmI21JUu/+GKZBoH/W5u6usENXUrWFRsyoW5ACUjFGgAFQp5gUlb/A==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz",
      "integrity": "sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.3.0.tgz",
      "integrity": "sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.14.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-diff": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/fast-diff/-/fast-diff-1.3.0.tgz",
      "integrity": "sha512-VxPP4NqbUjj6MaAOafWeUn2cXWLcCtljklUtZf0Ind4XQ+QPtmA0b18zZy0jIQx+ExRVCR/ZQpBmik5lXshNsw==",
      "dev": true,
      "license": "Apache-2.0"
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.2.tgz",
      "integrity": "sha512-AiwGJM8YcNOaobumgtng+6NHuOqC3A7MixFeDafM3X9cIUM+xUXoS5Vfgf+OihAYe20fxqNM9yPBXJzRtZ/4eA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "15.14.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-15.14.0.tgz",
      "integrity": "sha512-OkToC372DtlQeje9/zHIo5CT8lRP/FUgEOKBEhU4e0abL7J7CD24fD9ohiLN5hagG/kWCYj4K5oaxxtj2Z0Dig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/joi": {
      "version": "17.13.3",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.13.3.tgz",
      "integrity": "sha512-otDA4ldcIx+ZXsKHWmp0YizCweVRZG96J10b0FevjfuncLO1oX59THoAmHkNubYJ+9gWsYsp5k8v4ib6oDv1fA==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@hapi/hoek": "^9.3.0",
        "@hapi/topo": "^5.1.0",
        "@sideway/address": "^4.1.5",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prettier": {
      "version": "3.4.2",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-3.4.2.tgz",
      "integrity": "sha512-e9MewbtFo+Fevyuxn/4rrcDAaq0IYxPGLvObpQjiZBMAzB9IGmzlnG9RZy3FFas+eBMu2vA0CszMeduow5dIuQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "bin": {
        "prettier": "bin/prettier.cjs"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/prettier/prettier?sponsor=1"
      }
    },
    "node_modules/prettier-linter-helpers": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/prettier-linter-helpers/-/prettier-linter-helpers-1.0.0.tgz",
      "integrity": "sha512-GbK2cP9nraSSUF9N2XwUwqfzlAFlMNYYl+ShE/V+H8a9uNl/oUqB1w2EL54Jh0OlyRSd8RfWYJ3coVS4TROP2w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-diff": "^1.1.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/synckit": {
      "version": "0.9.2",
      "resolved": "https://registry.npmjs.org/synckit/-/synckit-0.9.2.tgz",
      "integrity": "sha512-vrozgXDQwYO72vHjUb/HnFbQx1exDjoKzqx23aXEg2a9VIg2TSFZ8FmeZpTjUCFMYw7mpX4BE2SFu8wI7asYsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@pkgr/core": "^0.1.0",
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/unts"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "dev": true,
      "license": "0BSD"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}

||------------------------------------------------------||

File: package.json
Content:
{
  "name": "backend-platform",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "dotenv": "^16.4.7",
    "joi": "^17.13.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.19.0",
    "eslint": "^9.19.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-prettier": "^5.2.3",
    "globals": "^15.14.0"
  }
}

||------------------------------------------------------||

File: projectStructureContent\projectContent.js
Content:
import { createWriteStream, readdirSync, statSync, readFileSync } from 'fs';
import { join } from 'path';

// دالة عشان تطبع محتوى الملفات في ملف نصي
function printFilesContentToFile(rootDir, outputFilePath) {
  // نفتح ملف الناتج عشان نكتب فيه
  const outputStream = createWriteStream(outputFilePath);

  // دالة عشان نقرا الفولدرات والملفات بشكل متكرر (recursive)
  function readDirectory(dir) {
    const files = readdirSync(dir);

    files.forEach((file) => {
      const filePath = join(dir, file);
      const stat = statSync(filePath);

      if (stat.isDirectory()) {
        // لو ده فولدر، ندخل فيه ونكمل القراية
        if (file !== 'node_modules') { // نتجاهل فولدر node_modules عشان ميتعبناش
          readDirectory(filePath);
        }
      } else {
        // لو ده ملف، نقرا المحتوى بتاعه
        const content = readFileSync(filePath, 'utf8').trim(); // نقرا المحتوى ونشيل المسافات الفاضية

        // لو الملف مش فاضي، نكتب مساره ومحتواه في ملف الناتج
        if (content) {
            outputStream.write(`File: ${filePath.replace(/(\.\.\/|\.\.\\)/g, '')}\n`);
            outputStream.write('Content:\n');
            outputStream.write(content);
            outputStream.write('\n\n||------------------------------------------------------||\n\n'); // فاصل بين الملفات
        }
      }
    });
  }

  // نبدأ القراية من الفولدر الرئيسي
  readDirectory(rootDir);

  // نغلق ملف الناتج بعد ما نخلص
  outputStream.end();
  console.log(`The file has been created successfuly: ${outputFilePath}`);
}

// نستخدم الدالة
const projectPath = '../'; // المسار بتاع مشروعك
const outputFile = 'projectFilesContent2.txt'; // اسم الملف اللي هيتم إنشاءه
printFilesContentToFile(projectPath, outputFile);

||------------------------------------------------------||

File: projectStructureContent\projectFilesContent.txt
Content:
File: src\config\environments\Database.env
Content:
# MySQL
MYSQL_HOST=localhost
MYSQL_PORT=3306
MYSQL_USER=root
MYSQL_PASSWORD=password
MYSQL_DB=my_database

# PostgreSQL
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=root
POSTGRES_PASSWORD=password
POSTGRES_DB=my_database

# MongoDB
MONGO_URI=mongodb://localhost:27017/my_database

# Redis (Cache and Queue)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=password
REDIS_DB=0

||------------------------------------------------------||

File: src\config\environments\FileStorage.env
Content:
FILE_STORAGE_PATH=./uploads
MAX_FILE_SIZE=5242880 # 5MB

||------------------------------------------------------||

File: src\config\environments\GraphQL.env
Content:
# GraphQL Settings
GRAPHQL_ENDPOINT=/graphql        # مسار GraphQL
GRAPHQL_PLAYGROUND=true          # تفعيل Playground (لبيئة التطوير فقط)
GRAPHQL_INTROSPECTION=true       # تمكين introspection (للتطوير، أوقفه في الإنتاج)
GRAPHQL_DEPTH_LIMIT=10           # الحد الأقصى لعمق الاستعلام (لحماية الخادم)
GRAPHQL_COMPLEXITY_LIMIT=5000    # الحد الأقصى لتعقيد الاستعلام (لحماية الأداء)
GRAPHQL_TRACING=true             # تمكين تتبع الأداء

||------------------------------------------------------||

File: src\config\environments\IntegratedAuthentication.env
Content:
# OAuth2
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

FACEBOOK_CLIENT_ID=your_facebook_client_id
FACEBOOK_CLIENT_SECRET=your_facebook_client_secret

GITHUB_CLIENT_ID=your_github_client_id
GITHUB_CLIENT_SECRET=your_github_client_secret

||------------------------------------------------------||

File: src\config\environments\Kafka.env
Content:
KAFKA_BROKER=localhost:9092
KAFKA_CLIENT_ID=my_app
KAFKA_GROUP_ID=my_group

||------------------------------------------------------||

File: src\config\environments\Notifications.env
Content:
# Email Notifications
EMAIL_HOST=smtp.mailtrap.io
EMAIL_PORT=2525
EMAIL_USER=your_email_user
EMAIL_PASSWORD=your_email_password
EMAIL_FROM=no-reply@yourdomain.com

# SMS (Twilio)
TWILIO_ACCOUNT_SID=your_twilio_sid
TWILIO_AUTH_TOKEN=your_twilio_auth_token
TWILIO_PHONE_NUMBER=your_twilio_number

# Push Notifications (Firebase)
FIREBASE_API_KEY=your_firebase_api_key
FIREBASE_PROJECT_ID=your_firebase_project_id

||------------------------------------------------------||

File: src\config\environments\Queue.env
Content:
# RabbitMQ Settings
RABBITMQ_HOST=localhost           # عنوان الخادم
RABBITMQ_PORT=5672                # المنفذ الافتراضي
RABBITMQ_USER=guest               # اسم المستخدم
RABBITMQ_PASSWORD=guest           # كلمة المرور
RABBITMQ_VHOST=/                  # Virtual Host
RABBITMQ_QUEUE=my_queue           # اسم الطابور الافتراضي
RABBITMQ_EXCHANGE=my_exchange     # اسم التبادل الافتراضي
RABBITMQ_EXCHANGE_TYPE=direct     # نوع التبادل (direct, topic, fanout, headers)
RABBITMQ_RETRY_COUNT=5            # عدد مرات إعادة المحاولة عند فشل الرسائل
RABBITMQ_RETRY_DELAY_MS=5000      # تأخير بين المحاولات (بالمللي ثانية)
RABBITMQ_HEARTBEAT=60             # نبضات الحياة (بالثواني)

||------------------------------------------------------||

File: src\config\environments\Security.env
Content:
# JWT (JSON Web Token)
JWT_SECRET=my_secret_key
JWT_EXPIRES_IN=1h

# CORS (Cross-Origin Resource Sharing)
CORS_ORIGIN=*
CORS_METHODS=GET,POST,PUT,DELETE
CORS_HEADERS=Content-Type,Authorization

||------------------------------------------------------||

File: src\config\environments\Server.env
Content:
# Server Settings
SERVER_HOST=0.0.0.0
SERVER_PORT=3000
NODE_ENV=development  # development, production, testing
BASE_URL=http://localhost:3000

||------------------------------------------------------||

File: src\config\environments\SessionCookies.env
Content:
# Cookie settings
COOKIE_SECRET=your_cookie_secret_key
COOKIE_MAX_AGE=3600000 # 1 hour in milliseconds

# Session settings
SESSION_SECRET=your_session_secret_key
SESSION_MAX_AGE=3600000 # 1 hour in milliseconds

||------------------------------------------------------||

File: src\config\environments\Webhooks.env
Content:
WEBHOOK_SECRET=my_webhook_secret
WEBHOOK_RETRY_COUNT=3
WEBHOOK_RETRY_DELAY=5000

||------------------------------------------------------||

File: src\config\environments\Websocket.env
Content:
WEBSOCKET_PORT=8080
WEBSOCKET_PATH=/ws
WEBSOCKET_ORIGIN=*

||------------------------------------------------------||

File: src\config\database.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من المتغيرات لكل نوع من قواعد البيانات
const databaseSchema = object({
  // MySQL
  MYSQL_HOST: string().hostname().required(),
  MYSQL_PORT: number().integer().min(1).max(65535).required(),
  MYSQL_USER: string().required(),
  MYSQL_PASSWORD: string().allow('').required(),
  MYSQL_DB: string().required(),

  // PostgreSQL
  POSTGRES_HOST: string().hostname().required(),
  POSTGRES_PORT: number().integer().min(1).max(65535).required(),
  POSTGRES_USER: string().required(),
  POSTGRES_PASSWORD: string().allow('').required(),
  POSTGRES_DB: string().required(),

  // MongoDB
  MONGO_URI: string().uri().required(),

  // Redis (للتخزين المؤقت والطوابير)
  REDIS_HOST: string().hostname().required(),
  REDIS_PORT: number().integer().min(1).max(65535).required(),
  REDIS_PASSWORD: string().allow('').required(),
  REDIS_DB: number().integer().min(0).default(0),
}).unknown(); // السماح بوجود متغيرات أخرى

// التحقق من المتغيرات
const { value: databaseConfig, error } = databaseSchema.validate(process.env, {
  abortEarly: false, // عرض جميع الأخطاء
});

if (error) {
  throw new Error(
    `Database configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

// تصدير الإعدادات لكل نوع من قواعد البيانات
export const mysql = {
    host: databaseConfig.MYSQL_HOST,
    port: databaseConfig.MYSQL_PORT,
    user: databaseConfig.MYSQL_USER,
    password: databaseConfig.MYSQL_PASSWORD,
    database: databaseConfig.MYSQL_DB,
};
export const postgresql = {
    host: databaseConfig.POSTGRES_HOST,
    port: databaseConfig.POSTGRES_PORT,
    user: databaseConfig.POSTGRES_USER,
    password: databaseConfig.POSTGRES_PASSWORD,
    database: databaseConfig.POSTGRES_DB,
};
export const mongodb = {
    uri: databaseConfig.MONGO_URI,
};
export const redis = {
    host: databaseConfig.REDIS_HOST,
    port: databaseConfig.REDIS_PORT,
    password: databaseConfig.REDIS_PASSWORD,
    db: databaseConfig.REDIS_DB,
};

||------------------------------------------------------||

File: src\config\fileStorage.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const fileStorageSchema = object({
  FILE_STORAGE_PATH: string().required(),
  MAX_FILE_SIZE: number().integer().min(1).required(),
}).unknown(); // السماح بمتغيرات إضافية

// التحقق من القيم
const { value: fileStorageConfig, error } = fileStorageSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `File Storage configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const storagePath = fileStorageConfig.FILE_STORAGE_PATH;
export const maxFileSize = fileStorageConfig.MAX_FILE_SIZE;

||------------------------------------------------------||

File: src\config\graphql.config.js
Content:
import { object, string, boolean, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const graphqlSchema = object({
  GRAPHQL_ENDPOINT: string().uri({ allowRelative: true }).required(),
  GRAPHQL_PLAYGROUND: boolean().required(),
  GRAPHQL_INTROSPECTION: boolean().required(),
  GRAPHQL_DEPTH_LIMIT: number().integer().min(1).default(10),
  GRAPHQL_COMPLEXITY_LIMIT: number().integer().min(1).default(5000),
  GRAPHQL_TRACING: boolean().default(false),
}).unknown();

const { value: graphqlConfig, error } = graphqlSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `GraphQL configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  GRAPHQL_ENDPOINT,
  GRAPHQL_PLAYGROUND,
  GRAPHQL_INTROSPECTION,
  GRAPHQL_DEPTH_LIMIT,
  GRAPHQL_COMPLEXITY_LIMIT,
  GRAPHQL_TRACING,
} = graphqlConfig;

||------------------------------------------------------||

File: src\config\integratedAuth.config.js
Content:
import { object, string } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const authSchema = object({
  GOOGLE_CLIENT_ID: string().required(),
  GOOGLE_CLIENT_SECRET: string().required(),
  FACEBOOK_CLIENT_ID: string().required(),
  FACEBOOK_CLIENT_SECRET: string().required(),
  GITHUB_CLIENT_ID: string().required(),
  GITHUB_CLIENT_SECRET: string().required(),
}).unknown();

const { value: integratedAuthConfig, error } = authSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Integrated Authentication configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}


export const {
  GOOGLE_CLIENT_ID,
  GOOGLE_CLIENT_SECRET,
  FACEBOOK_CLIENT_ID,
  FACEBOOK_CLIENT_SECRET,
  GITHUB_CLIENT_ID,
  GITHUB_CLIENT_SECRET,
} = integratedAuthConfig;

||------------------------------------------------------||

File: src\config\kafka.config.js
Content:
import { object, string } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const kafkaSchema = object({
  KAFKA_BROKER: string().required(),
  KAFKA_CLIENT_ID: string().required(),
  KAFKA_GROUP_ID: string().required(),
}).unknown();

const { value: kafkaConfig, error } = kafkaSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Kafka configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  KAFKA_BROKER,
  KAFKA_CLIENT_ID,
  KAFKA_GROUP_ID,
} = kafkaConfig;

||------------------------------------------------------||

File: src\config\notifications.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const notificationsSchema = object({
  // Email Notifications
  EMAIL_HOST: string().hostname().required(),
  EMAIL_PORT: number().integer().min(1).max(65535).required(),
  EMAIL_USER: string().required(),
  EMAIL_PASSWORD: string().required(),
  EMAIL_FROM: string().email().required(),

  // SMS (Twilio)
  TWILIO_ACCOUNT_SID: string().required(),
  TWILIO_AUTH_TOKEN: string().required(),
  TWILIO_PHONE_NUMBER: string().required(),

  // Push Notifications (Firebase)
  FIREBASE_API_KEY: string().required(),
  FIREBASE_PROJECT_ID: string().required(),
}).unknown();

const { value: notificationsConfig, error } = notificationsSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Notifications configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  EMAIL_HOST,
  EMAIL_PORT,
  EMAIL_USER,
  EMAIL_PASSWORD,
  EMAIL_FROM,
  TWILIO_ACCOUNT_SID,
  TWILIO_AUTH_TOKEN,
  TWILIO_PHONE_NUMBER,
  FIREBASE_API_KEY,
  FIREBASE_PROJECT_ID,
} = notificationsConfig;

||------------------------------------------------------||

File: src\config\queue.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const queueSchema = object({
  RABBITMQ_HOST: string().hostname().required(),
  RABBITMQ_PORT: number().integer().min(1).max(65535).required(),
  RABBITMQ_USER: string().required(),
  RABBITMQ_PASSWORD: string().required(),
  RABBITMQ_VHOST: string().default('/'),
  RABBITMQ_QUEUE: string().required(),
  RABBITMQ_EXCHANGE: string().required(),
  RABBITMQ_EXCHANGE_TYPE: string()
    .valid('direct', 'topic', 'fanout', 'headers')
    .default('direct'),
  RABBITMQ_RETRY_COUNT: number().integer().min(0).default(5),
  RABBITMQ_RETRY_DELAY_MS: number().integer().min(0).default(5000),
  RABBITMQ_HEARTBEAT: number().integer().min(0).default(60),
}).unknown();

const { value: queueConfig, error } = queueSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Queue configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  RABBITMQ_HOST,
  RABBITMQ_PORT,
  RABBITMQ_USER,
  RABBITMQ_PASSWORD,
  RABBITMQ_VHOST,
  RABBITMQ_QUEUE,
  RABBITMQ_EXCHANGE,
  RABBITMQ_EXCHANGE_TYPE,
  RABBITMQ_RETRY_COUNT,
  RABBITMQ_RETRY_DELAY_MS,
  RABBITMQ_HEARTBEAT,
} = queueConfig;

||------------------------------------------------------||

File: src\config\security.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const securitySchema = object({
  // JWT
  JWT_SECRET: string().required(),
  JWT_EXPIRES_IN: string().default('1h'),

  // CORS
  CORS_ORIGIN: string().required(),
  CORS_METHODS: string().default('GET,POST,PUT,DELETE'),
  CORS_HEADERS: string().default('Content-Type,Authorization'),
}).unknown();

const { value: securityConfig, error } = securitySchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Security configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  JWT_SECRET,
  JWT_EXPIRES_IN,
  CORS_ORIGIN,
  CORS_METHODS,
  CORS_HEADERS,
} = securityConfig;

||------------------------------------------------------||

File: src\config\server.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const serverSchema = object({
  SERVER_HOST: string().hostname().default('0.0.0.0'),
  SERVER_PORT: number().integer().min(1).max(65535).default(3000),
  NODE_ENV: string()
    .valid('development', 'production', 'testing')
    .default('development'),
  BASE_URL: string().uri().required(),
}).unknown();

const { value: serverConfig, error } = serverSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Server configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  SERVER_HOST,
  SERVER_PORT,
  NODE_ENV,
  BASE_URL,
} = serverConfig;

||------------------------------------------------------||

File: src\config\sessionCookies.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const sessionCookiesSchema = object({
  SESSION_SECRET: string().required(),
  SESSION_MAX_AGE: number().integer().min(1).required(),
  COOKIE_SECRET: string().required(),
  COOKIE_MAX_AGE: number().integer().min(1).required(),
}).unknown(); // السماح بمتغيرات إضافية

// التحقق من القيم
const { value: sessionCookiesConfig, error } = sessionCookiesSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
    throw new Error(
        `Session Cookies configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
    );
}

export const {
    SESSION_SECRET,
    SESSION_MAX_AGE,
    COOKIE_SECRET,
    COOKIE_MAX_AGE,
} = sessionCookiesConfig;

||------------------------------------------------------||

File: src\config\status.config.js
Content:
const statusCodes = {
    // 100 informational
    CONTINUE: 100,
    SWITCHING_PROTOCOLS: 101,
    PROCESSING: 102,
    EARLY_HINTS: 103,
    // 200 success
    OK: 200,
    CREATED: 201,
    ACCEPTED: 202,
    NON_AUTHORITATIVE_INFORMATION: 203,
    NO_CONTENT: 204,
    RESET_CONTENT: 205,
    PARTIAL_CONTENT: 206,
    MULTI_STATUS: 207,
    ALREADY_REPORTED: 208,
    IM_USED: 226,
    // 300 redirection
    MULTIPLE_CHOICES: 300,
    MOVED_PERMANENTLY: 301,
    FOUND: 302,
    SEE_OTHER: 303,
    NOT_MODIFIED: 304,
    USE_PROXY: 305,
    SWITCH_PROXY: 306,
    TEMPORARY_REDIRECT: 307,
    PERMANENT_REDIRECT: 308,
    // 400 client errors
    BAD_REQUEST: 400,
    UNAUTHORIZED: 401,
    FORBIDDEN: 403,
    NOT_FOUND: 404,
    METHOD_NOT_ALLOWED: 405,
    NOT_ACCEPTABLE: 406,
    REQUEST_TIMEOUT: 408,
    CONFLICT: 409,
    GONE: 410,
    LENGTH_REQUIRED: 411,
    PRECONDITION_FAILED: 412,
    PAYLOAD_TOO_LARGE: 413,
    URI_TOO_LONG: 414,
    UNSUPPORTED_MEDIA_TYPE: 415,
    RANGE_NOT_SATISFIABLE: 416,
    EXPECTATION_FAILED: 417,
    IM_A_TEAPOT: 418,
    MISDIRECTED_REQUEST: 421,
    UNPROCESSABLE_ENTITY: 422,
    LOCKED: 423,
    FAILED_DEPENDENCY: 424,
    UPGRADE_REQUIRED: 426,
    PRECONDITION_REQUIRED: 428,
    TOO_MANY_REQUESTS: 429,
    REQUEST_HEADER_FIELDS_TOO_LARGE: 431,
    UNAVAILABLE_FOR_LEGAL_REASONS: 451,
    // 500 server errors
    INTERNAL_SERVER_ERROR: 500,
    NOT_IMPLEMENTED: 501,
    BAD_GATEWAY: 502,
    SERVICE_UNAVAILABLE: 503,
    GATEWAY_TIMEOUT: 504,
    HTTP_VERSION_NOT_SUPPORTED: 505,
    VARIANT_ALSO_NEGOTIATES: 506,
    INSUFFICIENT_STORAGE: 507,
    LOOP_DETECTED: 508,
    NOT_EXTENDED: 510,
    NETWORK_AUTHENTICATION_REQUIRED: 511
};

export default statusCodes;

||------------------------------------------------------||

File: src\config\webhooks.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const webhooksSchema = object({
  WEBHOOK_SECRET: string().required(),
  WEBHOOK_RETRY_COUNT: number().integer().min(0).default(3),
  WEBHOOK_RETRY_DELAY: number().integer().min(0).default(5000),
}).unknown();

const { value: webhooksConfig, error } = webhooksSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Webhooks configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  WEBHOOK_SECRET,
  WEBHOOK_RETRY_COUNT,
  WEBHOOK_RETRY_DELAY,
} = webhooksConfig;

||------------------------------------------------------||

File: src\config\websocket.config.js
Content:
import { object, number, string } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const websocketSchema = object({
  WEBSOCKET_PORT: number().integer().min(1).max(65535).default(8080),
  WEBSOCKET_PATH: string().default('/ws'),
  WEBSOCKET_ORIGIN: string().default('*'),
}).unknown();

const { value: websocketConfig, error } = websocketSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `WebSocket configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  WEBSOCKET_PORT,
  WEBSOCKET_PATH,
  WEBSOCKET_ORIGIN,
} = websocketConfig;

||------------------------------------------------------||

File: src\middlewares\authentication\auth.middleware.js
Content:
import { verify } from 'jsonwebtoken';
import { JWT_SECRET } from '../../config/security.config.js';

const authMiddleware = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];

  if (!token) {
    res.status(401);
    return next(new Error('Unauthorized: No token provided'));
  }

  try {
    const decoded = verify(token, JWT_SECRET);
    req.user = decoded; // ربط بيانات المستخدم بالطلب
    next();
  } catch (err) {
    res.status(401);
    next(new Error('Unauthorized: Invalid token'));
  }
};

export default authMiddleware;

||------------------------------------------------------||

File: src\middlewares\authentication\websocketAuth.middleware.js
Content:
import { verify } from 'jsonwebtoken';
import { JWT_SECRET } from '../../config/security.config.js';

const wsAuthMiddleware = (socket, next) => {
  const token = socket.handshake.query.token;

  if (!token) {
    return next(new Error('Unauthorized: No token provided'));
  }

  try {
    const decoded = verify(token, JWT_SECRET);
    socket.user = decoded;
    next();
  } catch (err) {
    next(new Error('Unauthorized: Invalid token'));
  }
};

export default wsAuthMiddleware;

||------------------------------------------------------||

File: src\middlewares\errors\errorHandler.middleware.js
Content:
import { NODE_ENV } from '../../config/server.config.js';

const errorHandlerMiddleware = (err, req, res, next) => {
    const statusCode = res.statusCode !== 200 ? res.statusCode : 500;
    const message = NODE_ENV === 'production' ? 'Something went wrong' : err.message;
    const stack = NODE_ENV === 'production' ? null : err.stack;
    const messageBody = {
        success: false,
        error: {message, stack}
    };
  
    console.error(`[Error] ${statusCode} - ${err.message} - ${req.originalUrl} - ${req.method} - ${req.ip}`, err.stack);
    
    res.status(statusCode).json(messageBody);
  };
  
  export default errorHandlerMiddleware;

||------------------------------------------------------||

File: src\middlewares\errors\notFound.middleware.js
Content:
const notFoundMiddleware = (req, res, next) => {
    res.status(404);
    next(new Error(`404 Not Found - ${req.originalUrl}`));
  };
  
  export default notFoundMiddleware;

||------------------------------------------------------||

File: src\middlewares\logging\requestLogger.middleware.js
Content:
import morgan from 'morgan';

const requestLogger = morgan(':method :url :status :res[content-length] - :response-time ms');

export default requestLogger;

||------------------------------------------------------||

File: src\middlewares\logging\responseTime.middleware.js
Content:
import responseTime from 'response-time';

const responseTimeMiddleware = responseTime((req, res, time) => {
  console.log(`[Response Time] ${req.method} ${req.url} - ${time.toFixed(2)}ms`);
});

export default responseTimeMiddleware;

||------------------------------------------------------||

File: src\middlewares\permissions\permissions.middleware.js
Content:
import Permissions from '../../utils/permissions/permissions.util.js';

export const hasPermissions = (...permissions) => (req, res, next) => {
    const userPermissions = new Permissions(req.user.permissions);
  
    if (!userPermissions.has(permissions)) {
      res.status(403);
      return next(new Error('You do not have the required permissions'));
    }
  
    next();
};

export const AnyPermission = (...permissions) => (req, res, next) => {
    const userPermissions = new Permissions(req.user.permissions);
  
    if (!userPermissions.any(permissions)) {
      res.status(403);
      return next(new Error('You do not have the required permissions'));
    }
  
    next();
}

||------------------------------------------------------||

File: src\middlewares\security\cors.middleware.js
Content:
import cors from 'cors';
import { CORS_ORIGIN, CORS_METHODS, CORS_HEADERS } from '../../config/security.config.js';

const corsMiddleware = cors({
  origin: CORS_ORIGIN,
  methods: CORS_METHODS,
  allowedHeaders: CORS_HEADERS,
});

export default corsMiddleware;

||------------------------------------------------------||

File: src\middlewares\security\helmet.middleware.js
Content:
import helmet from 'helmet';

const helmetMiddleware = helmet({
  contentSecurityPolicy: {
    useDefaults: true,
    directives: {
      defaultSrc: ["'self'"], // السماح فقط بالمصادر من نفس الخادم
      scriptSrc: [
        "'self'", 
        "'unsafe-inline'", // استخدم فقط لو محتاجه لبيئة التطوير
        // "https://trustedscripts.example.com",
      ],
      styleSrc: [
        "'self'",
        "'unsafe-inline'", // استخدم لو محتاج CSS inline
        // "https://trustedstyles.example.com",
      ],
      imgSrc: ["'self'", "data:"/*, "https://trustedimages.example.com"*/], // الصور
      connectSrc: ["'self'"/*, "https://api.example.com"*/], // API
      fontSrc: ["'self'"/*, "https://fonts.gstatic.com"*/], // الخطوط
      objectSrc: ["'none'"], // منع objects بالكامل
      frameSrc: ["'none'"], // منع iframe بالكامل
      upgradeInsecureRequests: [], // ترقية كل الروابط من HTTP لـ HTTPS
    },
  },
  crossOriginEmbedderPolicy: true, // سياسة المصادر المدمجة عبر الأصل
  crossOriginResourcePolicy: { policy: 'same-origin' }, // سياسة المصادر عبر الأصل
  hsts: {
    maxAge: 31536000, // إجبار HTTPS لمدة سنة (ثواني)
    includeSubDomains: true, // تطبيقه على كل الـ subdomains
    preload: true, // لدعم الـ HSTS preload
  },
  frameguard: {
    action: 'deny', // منع تحميل الصفحة في iframe
  },
  dnsPrefetchControl: {
    allow: false, // منع المتصفح من DNS prefetching
  },
  referrerPolicy: {
    policy: 'strict-origin-when-cross-origin', // سياسة المرجع Referrer Policy
  },
  xssFilter: false, // حماية XSS (قديم ولكنه مفيد)
  noSniff: true, // منع Guessing Type للملفات
  permittedCrossDomainPolicies: {
    policy: 'none', // منع استخدام crossdomain.xml
  },
  hidePoweredBy: true, // إخفاء هيدر Express
});

export default helmetMiddleware;

||------------------------------------------------------||

File: src\middlewares\security\rateLimiter.middleware.js
Content:
import { RateLimiterMemory } from 'rate-limit-flexible';

// إعداد الـ Rate Limiter العام لكل المستخدمين
const generalLimiter = new RateLimiterMemory({
    points: 100, // عدد الطلبات المسموحة
    duration: 60, // خلال 60 ثانية (دقيقة واحدة)
});

// إعداد الـ Rate Limiter لمحاولات تسجيل الدخول (أكثر صرامة)
const loginLimiter = new RateLimiterMemory({
    points: 5, // مسموح بـ 5 محاولات فقط
    duration: 60 * 5, // خلال 5 دقائق
});

// ميدل وير عام للحد من الطلبات
const rateLimiterMiddleware = (req, res, next) => {
    generalLimiter.consume(req.ip)
        .then(() => {
            next(); // كمل الطلب عادي
        })
        .catch(() => {
            res.status(429);
            next(new Error('Too many requests, please try again later.'));
        });
};

// ميدل وير خاص بتسجيل الدخول
const loginRateLimiter = (req, res, next) => {
    loginLimiter.consume(req.ip)
        .then(() => {
            next();
        })
        .catch(() => {
          res.status(429);
          next(new Error('Too many login attempts, please try again later.'));
        });
};

// تصدير الميدل وير
export default { rateLimiterMiddleware, loginRateLimiter };

||------------------------------------------------------||

File: src\middlewares\security\session.middleware.js
Content:
import session from 'express-session';
const RedisStore = require('connect-redis')(session); // استخدام Redis لتخزين الجلسات
import redisClient from '../../modules/cache/redis/index.js'; // اتصال Redis من ملف config
import { SESSION_SECRET } from '../../config/sessionCookies.config.js'; // اتصال Redis من ملف config
import { NODE_ENV } from '../../config/server.config.js'; // اتصال Redis من ملف config

const sessionMiddleware = session({
  store: new RedisStore({ client: redisClient }),
  secret: SESSION_SECRET || 'supersecretkey', // المفتاح السري للجلسات
  resave: false, // منع إعادة حفظ الجلسة لو مفيش تغييرات
  saveUninitialized: false, // منع إنشاء جلسات جديدة غير ضرورية
  cookie: {
    secure: NODE_ENV === 'production', // الجلسات تكون آمنة فقط في الإنتاج
    httpOnly: true, // حماية الكوكيز من الـ JavaScript
    maxAge: 1000 * 60 * 60 * 24, // مدة الجلسة: يوم كامل
  },
});

export default sessionMiddleware;

||------------------------------------------------------||

File: src\middlewares\security\xssClean.middleware.js
Content:
import xssClean from 'xss-clean';

const xssProtectionMiddleware = xssClean();

export default xssProtectionMiddleware;

||------------------------------------------------------||

File: src\middlewares\validation\routesValidation.config.js
Content:
import { object, string, boolean, number } from "joi";

// export const userSchema = object({
//     email: string().email().required(),
//     password: string().min(6).required(),
// });

||------------------------------------------------------||

File: src\middlewares\validation\validation.middleware.js
Content:
const validationMiddleware = (schema) => (req, res, next) => {
    const { error, value } = schema.validate(req.body, { abortEarly: false });
  
    if (error) {
        res.status(400);
        return next(new Error(error.details.map((err) => err.message).join(', ')));
    }

    if(!req.value) req.value = {};
    req.value.body = value;
  
    next();
  };
  
  export default validationMiddleware;

||------------------------------------------------------||

File: src\modules\cache\redis\index.js
Content:
import Redis from 'ioredis';
import { redis } from '../../../config/database.config.js';

const redisClient = new Redis({
  host: redis.host || 'localhost',
  port: redis.port || 6379,
  password: redis.password || '',
});

redisClient.on('connect', () => console.log('Connected to Redis!'));
redisClient.on('error', (err) => console.error('Redis Error:', err));

export default redisClient;

||------------------------------------------------------||

File: src\utils\emailHelper.util.js
Content:
import { createTransport } from 'nodemailer';
import { EMAIL_USER, EMAIL_PASSWORD } from '../config/notifications.config.js';

const transporter = createTransport({
    service: 'gmail',
    auth: {
        user: EMAIL_USER,
        pass: EMAIL_PASSWORD,
    },
});

const sendEmail = async (to, subject, text) => {
    try {
        await transporter.sendMail({ from: EMAIL_USER, to, subject, text });
        return true;
    } catch (error) {
        throw error;
    }
};

export default { sendEmail };

||------------------------------------------------------||

File: src\utils\fileHelper.util.js
Content:
import { existsSync, unlinkSync } from 'fs';
import { join } from 'path';

const saveFile = (file, folder = 'uploads') => {
    const filePath = join(__dirname, '../', folder, file.name);
    file.mv(filePath, (err) => {
        if (err) throw err;
    });
    return filePath;
};

const deleteFile = (filePath) => {
    if (existsSync(filePath)) {
        unlinkSync(filePath);
    }
};

export default { saveFile, deleteFile };

||------------------------------------------------------||

File: src\utils\hash.util.js
Content:
import { genSalt, hash as _hash, compare } from 'bcryptjs';

const hashPassword = async (password, saltNumber = 10) => {
    const salt = await genSalt(saltNumber);
    return await _hash(password, salt);
};

const comparePassword = async (password, hash) => {
    return await compare(password, hash);
};

export default { hashPassword, comparePassword };

||------------------------------------------------------||

File: src\utils\jwt.util.js
Content:
import { sign, verify } from 'jsonwebtoken';
import { JWT_SECRET } from '../config/security.config.js';

const generateToken = (payload, expiresIn = '1h') => {
    return sign(payload, JWT_SECRET, { expiresIn });
};

const verifyToken = (token) => {
    try {
        return verify(token, JWT_SECRET);
    } catch (error) {
        return null;
    }
};

export default { generateToken, verifyToken };

||------------------------------------------------------||

File: src\utils\logger.util.js
Content:
import { createLogger, format as _format, transports as _transports } from "winston";

const logger = (level) => createLogger({
    level: "info",
    format: _format.combine(
        _format.timestamp(),
        _format.json(),
        _format.printf(({ timestamp, level, message }) => {
            return `[${timestamp}] [${level.toUpperCase()}]: ${message}`;
        })
    ),
    transports: [
        new _transports.Console(),
        new _transports.File({ filename: "logs/error.log", level: "error" }),
        new _transports.File({ filename: "logs/combined.log" }),
    ],
});

export default logger;

||------------------------------------------------------||

File: src\utils\object.util.js
Content:
const alterObject = (object, keys) => {
    const newObject = { ...object };
    keys.forEach(key => delete newObject[key]);
    return newObject;
};

||------------------------------------------------------||

File: src\utils\permissions\flags.js
Content:
export const PermissionFLAGS = {
    VIEW_CHANNEL: 1 << 0, // 1
    SEND_MESSAGES: 1 << 1, // 2
    MANAGE_MESSAGES: 1 << 2, // 4
    ADMINISTRATOR: 1 << 3, // 8
    DELETE_MESSAGES: 1 << 4, // 16
    BAN_USERS: 1 << 5, // 32
};

||------------------------------------------------------||

File: src\utils\permissions\permissions.util.js
Content:
import { PermissionFLAGS } from "./flags.js";

class Permissions {

    constructor(permissionNumber = 0) {
        this.permissions = permissionNumber;
    }

    // ✅ تحويل الإدخال (رقم أو اسم) إلى قيمة صحيحة
    static resolvePermissions(input) {
        if (!Array.isArray(input)) input = [input]; // تأكد إنه مصفوفة
        return input
            .map(perm => (typeof perm === "number" ? perm : PermissionFLAGS[perm] || 0))
            .reduce((acc, perm) => acc | perm, 0);
    }

    // ✅ التحقق إذا عنده **كل** الأذونات المطلوبة
    has(...permissions) {
        const checkPerms = Permissions.resolvePermissions(permissions.flat());
        return (this.permissions & checkPerms) === checkPerms;
    }

    // ✅ التحقق إذا عنده **أي** إذن من المجموعة
    any(...permissions) {
        const checkPerms = Permissions.resolvePermissions(permissions.flat());
        return (this.permissions & checkPerms) !== 0;
    }

    // ✅ تعيين الأذونات الجديدة بدل القديمة
    set(...permissions) {
        this.permissions = Permissions.resolvePermissions(permissions.flat());
        return this;
    }

    // ✅ إضافة أذونات متعددة
    add(...permissions) {
        this.permissions |= Permissions.resolvePermissions(permissions.flat());
        return this;
    }

    // ✅ حذف أذونات متعددة
    remove(...permissions) {
        this.permissions &= ~Permissions.resolvePermissions(permissions.flat());
        return this;
    }

    // ✅ إرجاع كل الأذونات في مصفوفة مفهومة
    getPermissionsList() {
        return Object.keys(PermissionFLAGS).filter(
            perm => (this.permissions & PermissionFLAGS[perm]) === PermissionFLAGS[perm]
        );
    }

    // ✅ تحويل مصفوفة أذونات إلى رقم واحد
    static fromArray(permissionsArray) {
        return Permissions.resolvePermissions(permissionsArray);
    }

    // ✅ طباعة الأذونات الحالية (للمساعدة في الديبج)
    toString() {
        return `Permissions: ${this.permissions} (${this.getPermissionsList().join(", ")})`;
    }
}

export default Permissions;

||------------------------------------------------------||

File: src\utils\randomString.util.js
Content:
import { randomBytes } from 'crypto';

const generateRandomString = (length = 32) => {
    return randomBytes(length).toString('hex');
};

export default { generateRandomString };

||------------------------------------------------------||

File: src\utils\responseHandler.util.js
Content:
const successResponse = (res, data, message = 'success', status = 200) => {
    return res.status(status).json({ success: true, message, data });
};

export default { successResponse };

||------------------------------------------------------||

File: src\utils\validators.util.js
Content:
import { object } from 'joi';

const validate = (data, schemaConfig) => {
    if(!schemaConfig) { 
        throw new Error('Schema is required for validation');
    }
    const schema = object(schemaConfig);
    return schema.validate(data);
};

export default { validate };

||------------------------------------------------------||

||------------------------------------------------------||

File: projectStructureContent\projectStructure.js
Content:
import { readdirSync, statSync } from 'fs';
import { join } from 'path';

function printDirectoryTree(dir, prefix = '') {
  // نجيب كل الملفات والفولدرات
  const files = readdirSync(dir);

  // نفصل الفولدرات عن الملفات
  const folders = files.filter(file => statSync(join(dir, file)).isDirectory());
  const filesOnly = files.filter(file => !statSync(join(dir, file)).isDirectory());

  // نطبع الفولدرات أولاً
  folders.forEach((folder, index) => {
    if (folder === 'node_modules') return; // نتجاهل فولدر node_modules عشان ميتعبناش
    const isLastFolder = index === folders.length - 1 && filesOnly.length === 0;
    console.log(prefix + (isLastFolder ? '└── ' : '├── ') + folder);

    // ندخل الفولدر ونطبع محتوياته
    printDirectoryTree(join(dir, folder), prefix + (isLastFolder ? '    ' : '│   '));
  });

  // نطبع الملفات بعد الفولدرات
  filesOnly.forEach((file, index) => {
    const isLastFile = index === filesOnly.length - 1;
    console.log(prefix + (isLastFile ? '└── ' : '├── ') + file);
  });
}

printDirectoryTree('../');

||------------------------------------------------------||

File: settings.json
Content:
{
     "eslint.workingDirectories": [{ "mode": "auto" }]
}

||------------------------------------------------------||

File: src\config\database.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من المتغيرات لكل نوع من قواعد البيانات
const databaseSchema = object({
  // MySQL
  MYSQL_HOST: string().hostname().required(),
  MYSQL_PORT: number().integer().min(1).max(65535).required(),
  MYSQL_USER: string().required(),
  MYSQL_PASSWORD: string().allow('').required(),
  MYSQL_DB: string().required(),

  // PostgreSQL
  POSTGRES_HOST: string().hostname().required(),
  POSTGRES_PORT: number().integer().min(1).max(65535).required(),
  POSTGRES_USER: string().required(),
  POSTGRES_PASSWORD: string().allow('').required(),
  POSTGRES_DB: string().required(),

  // MongoDB
  MONGO_URI: string().uri().required(),

  // Redis (للتخزين المؤقت والطوابير)
  REDIS_HOST: string().hostname().required(),
  REDIS_PORT: number().integer().min(1).max(65535).required(),
  REDIS_PASSWORD: string().allow('').required(),
  REDIS_DB: number().integer().min(0).default(0),
}).unknown(); // السماح بوجود متغيرات أخرى

// التحقق من المتغيرات
const { value: databaseConfig, error } = databaseSchema.validate(process.env, {
  abortEarly: false, // عرض جميع الأخطاء
});

if (error) {
  throw new Error(
    `Database configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

// تصدير الإعدادات لكل نوع من قواعد البيانات
export const mysql = {
    host: databaseConfig.MYSQL_HOST,
    port: databaseConfig.MYSQL_PORT,
    user: databaseConfig.MYSQL_USER,
    password: databaseConfig.MYSQL_PASSWORD,
    database: databaseConfig.MYSQL_DB,
};
export const postgresql = {
    host: databaseConfig.POSTGRES_HOST,
    port: databaseConfig.POSTGRES_PORT,
    user: databaseConfig.POSTGRES_USER,
    password: databaseConfig.POSTGRES_PASSWORD,
    database: databaseConfig.POSTGRES_DB,
};
export const mongodb = {
    uri: databaseConfig.MONGO_URI,
};
export const redis = {
    host: databaseConfig.REDIS_HOST,
    port: databaseConfig.REDIS_PORT,
    password: databaseConfig.REDIS_PASSWORD,
    db: databaseConfig.REDIS_DB,
};

||------------------------------------------------------||

File: src\config\environments\Database.env
Content:
# MySQL
MYSQL_HOST=localhost
MYSQL_PORT=3306
MYSQL_USER=root
MYSQL_PASSWORD=password
MYSQL_DB=my_database

# PostgreSQL
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=root
POSTGRES_PASSWORD=password
POSTGRES_DB=my_database

# MongoDB
MONGO_URI=mongodb://localhost:27017/my_database

# Redis (Cache and Queue)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=password
REDIS_DB=0

||------------------------------------------------------||

File: src\config\environments\FileStorage.env
Content:
FILE_STORAGE_PATH=./uploads
MAX_FILE_SIZE=5242880 # 5MB

# AWS S3 Configuration (Optional) (If you want to use AWS S3 as file storage)
AWS_ACCESS_KEY=
AWS_SECRET_KEY=
AWS_BUCKET_NAME=

||------------------------------------------------------||

File: src\config\environments\GraphQL.env
Content:
# GraphQL Settings
GRAPHQL_ENDPOINT=/graphql        # مسار GraphQL
GRAPHQL_PLAYGROUND=true          # تفعيل Playground (لبيئة التطوير فقط)
GRAPHQL_INTROSPECTION=true       # تمكين introspection (للتطوير، أوقفه في الإنتاج)
GRAPHQL_DEPTH_LIMIT=10           # الحد الأقصى لعمق الاستعلام (لحماية الخادم)
GRAPHQL_COMPLEXITY_LIMIT=5000    # الحد الأقصى لتعقيد الاستعلام (لحماية الأداء)
GRAPHQL_TRACING=true             # تمكين تتبع الأداء

||------------------------------------------------------||

File: src\config\environments\IntegratedAuthentication.env
Content:
# OAuth2
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

FACEBOOK_CLIENT_ID=your_facebook_client_id
FACEBOOK_CLIENT_SECRET=your_facebook_client_secret

GITHUB_CLIENT_ID=your_github_client_id
GITHUB_CLIENT_SECRET=your_github_client_secret

||------------------------------------------------------||

File: src\config\environments\Kafka.env
Content:
KAFKA_BROKER=localhost:9092
KAFKA_CLIENT_ID=my_app
KAFKA_GROUP_ID=my_group

||------------------------------------------------------||

File: src\config\environments\Notifications.env
Content:
# Email Notifications
EMAIL_HOST=smtp.mailtrap.io
EMAIL_PORT=2525
EMAIL_USER=your_email_user
EMAIL_PASSWORD=your_email_password
EMAIL_FROM=no-reply@yourdomain.com

# SMS (Twilio)
TWILIO_ACCOUNT_SID=your_twilio_sid
TWILIO_AUTH_TOKEN=your_twilio_auth_token
TWILIO_PHONE_NUMBER=your_twilio_number

# Push Notifications (Firebase)
FIREBASE_API_KEY=your_firebase_api_key
FIREBASE_PROJECT_ID=your_firebase_project_id

||------------------------------------------------------||

File: src\config\environments\Queue.env
Content:
# RabbitMQ Settings
RABBITMQ_HOST=localhost           # عنوان الخادم
RABBITMQ_PORT=5672                # المنفذ الافتراضي
RABBITMQ_USER=guest               # اسم المستخدم
RABBITMQ_PASSWORD=guest           # كلمة المرور
RABBITMQ_VHOST=/                  # Virtual Host
RABBITMQ_QUEUE=my_queue           # اسم الطابور الافتراضي
RABBITMQ_EXCHANGE=my_exchange     # اسم التبادل الافتراضي
RABBITMQ_EXCHANGE_TYPE=direct     # نوع التبادل (direct, topic, fanout, headers)
RABBITMQ_RETRY_COUNT=5            # عدد مرات إعادة المحاولة عند فشل الرسائل
RABBITMQ_RETRY_DELAY_MS=5000      # تأخير بين المحاولات (بالمللي ثانية)
RABBITMQ_HEARTBEAT=60             # نبضات الحياة (بالثواني)

||------------------------------------------------------||

File: src\config\environments\Security.env
Content:
# JWT (JSON Web Token)
JWT_SECRET=my_secret_key
JWT_EXPIRES_IN=1h

# CORS (Cross-Origin Resource Sharing)
CORS_ORIGIN=*
CORS_METHODS=GET,POST,PUT,DELETE
CORS_HEADERS=Content-Type,Authorization

||------------------------------------------------------||

File: src\config\environments\Server.env
Content:
# Server Settings
SERVER_HOST=0.0.0.0
SERVER_PORT=3000
NODE_ENV=development  # development, production, testing
BASE_URL=http://localhost:3000

||------------------------------------------------------||

File: src\config\environments\SessionCookies.env
Content:
# Cookie settings
COOKIE_SECRET=your_cookie_secret_key
COOKIE_MAX_AGE=3600000 # 1 hour in milliseconds

# Session settings
SESSION_SECRET=your_session_secret_key
SESSION_MAX_AGE=3600000 # 1 hour in milliseconds

||------------------------------------------------------||

File: src\config\environments\Webhooks.env
Content:
WEBHOOK_SECRET=my_webhook_secret
WEBHOOK_RETRY_COUNT=3
WEBHOOK_RETRY_DELAY=5000

||------------------------------------------------------||

File: src\config\environments\Websocket.env
Content:
WEBSOCKET_PORT=8080
WEBSOCKET_PATH=/ws
WEBSOCKET_ORIGIN=*

||------------------------------------------------------||

File: src\config\fileStorage.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const fileStorageSchema = object({
  FILE_STORAGE_PATH: string().required(),
  MAX_FILE_SIZE: number().integer().min(1).required(),
  AWS_ACCESS_KEY: string(),
  AWS_SECRET_KEY: string(),
  AWS_BUCKET_NAME: string(),
}).unknown(); // السماح بمتغيرات إضافية

// التحقق من القيم
const { value: fileStorageConfig, error } = fileStorageSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `File Storage configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  FILE_STORAGE_PATH,
  MAX_FILE_SIZE,
  AWS_ACCESS_KEY,
  AWS_SECRET_KEY,
  AWS_BUCKET_NAME,
} = fileStorageConfig;

||------------------------------------------------------||

File: src\config\graphql.config.js
Content:
import { object, string, boolean, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const graphqlSchema = object({
  GRAPHQL_ENDPOINT: string().uri({ allowRelative: true }).required(),
  GRAPHQL_PLAYGROUND: boolean().required(),
  GRAPHQL_INTROSPECTION: boolean().required(),
  GRAPHQL_DEPTH_LIMIT: number().integer().min(1).default(10),
  GRAPHQL_COMPLEXITY_LIMIT: number().integer().min(1).default(5000),
  GRAPHQL_TRACING: boolean().default(false),
}).unknown();

const { value: graphqlConfig, error } = graphqlSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `GraphQL configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  GRAPHQL_ENDPOINT,
  GRAPHQL_PLAYGROUND,
  GRAPHQL_INTROSPECTION,
  GRAPHQL_DEPTH_LIMIT,
  GRAPHQL_COMPLEXITY_LIMIT,
  GRAPHQL_TRACING,
} = graphqlConfig;

||------------------------------------------------------||

File: src\config\integratedAuth.config.js
Content:
import { object, string } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const authSchema = object({
  GOOGLE_CLIENT_ID: string().required(),
  GOOGLE_CLIENT_SECRET: string().required(),
  FACEBOOK_CLIENT_ID: string().required(),
  FACEBOOK_CLIENT_SECRET: string().required(),
  GITHUB_CLIENT_ID: string().required(),
  GITHUB_CLIENT_SECRET: string().required(),
}).unknown();

const { value: integratedAuthConfig, error } = authSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Integrated Authentication configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}


export const {
  GOOGLE_CLIENT_ID,
  GOOGLE_CLIENT_SECRET,
  FACEBOOK_CLIENT_ID,
  FACEBOOK_CLIENT_SECRET,
  GITHUB_CLIENT_ID,
  GITHUB_CLIENT_SECRET,
} = integratedAuthConfig;

||------------------------------------------------------||

File: src\config\kafka.config.js
Content:
import { object, string } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const kafkaSchema = object({
  KAFKA_BROKER: string().required(),
  KAFKA_CLIENT_ID: string().required(),
  KAFKA_GROUP_ID: string().required(),
}).unknown();

const { value: kafkaConfig, error } = kafkaSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Kafka configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  KAFKA_BROKER,
  KAFKA_CLIENT_ID,
  KAFKA_GROUP_ID,
} = kafkaConfig;

||------------------------------------------------------||

File: src\config\notifications.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const notificationsSchema = object({
  // Email Notifications
  EMAIL_HOST: string().hostname().required(),
  EMAIL_PORT: number().integer().min(1).max(65535).required(),
  EMAIL_USER: string().required(),
  EMAIL_PASSWORD: string().required(),
  EMAIL_FROM: string().email().required(),

  // SMS (Twilio)
  TWILIO_ACCOUNT_SID: string().required(),
  TWILIO_AUTH_TOKEN: string().required(),
  TWILIO_PHONE_NUMBER: string().required(),

  // Push Notifications (Firebase)
  FIREBASE_API_KEY: string().required(),
  FIREBASE_PROJECT_ID: string().required(),
}).unknown();

const { value: notificationsConfig, error } = notificationsSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Notifications configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  EMAIL_HOST,
  EMAIL_PORT,
  EMAIL_USER,
  EMAIL_PASSWORD,
  EMAIL_FROM,
  TWILIO_ACCOUNT_SID,
  TWILIO_AUTH_TOKEN,
  TWILIO_PHONE_NUMBER,
  FIREBASE_API_KEY,
  FIREBASE_PROJECT_ID,
} = notificationsConfig;

||------------------------------------------------------||

File: src\config\queue.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const queueSchema = object({
  RABBITMQ_HOST: string().hostname().required(),
  RABBITMQ_PORT: number().integer().min(1).max(65535).required(),
  RABBITMQ_USER: string().required(),
  RABBITMQ_PASSWORD: string().required(),
  RABBITMQ_VHOST: string().default('/'),
  RABBITMQ_QUEUE: string().required(),
  RABBITMQ_EXCHANGE: string().required(),
  RABBITMQ_EXCHANGE_TYPE: string()
    .valid('direct', 'topic', 'fanout', 'headers')
    .default('direct'),
  RABBITMQ_RETRY_COUNT: number().integer().min(0).default(5),
  RABBITMQ_RETRY_DELAY_MS: number().integer().min(0).default(5000),
  RABBITMQ_HEARTBEAT: number().integer().min(0).default(60),
}).unknown();

const { value: queueConfig, error } = queueSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Queue configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  RABBITMQ_HOST,
  RABBITMQ_PORT,
  RABBITMQ_USER,
  RABBITMQ_PASSWORD,
  RABBITMQ_VHOST,
  RABBITMQ_QUEUE,
  RABBITMQ_EXCHANGE,
  RABBITMQ_EXCHANGE_TYPE,
  RABBITMQ_RETRY_COUNT,
  RABBITMQ_RETRY_DELAY_MS,
  RABBITMQ_HEARTBEAT,
} = queueConfig;

||------------------------------------------------------||

File: src\config\security.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const securitySchema = object({
  // JWT
  JWT_SECRET: string().required(),
  JWT_EXPIRES_IN: string().default('1h'),

  // CORS
  CORS_ORIGIN: string().required(),
  CORS_METHODS: string().default('GET,POST,PUT,DELETE'),
  CORS_HEADERS: string().default('Content-Type,Authorization'),
}).unknown();

const { value: securityConfig, error } = securitySchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Security configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  JWT_SECRET,
  JWT_EXPIRES_IN,
  CORS_ORIGIN,
  CORS_METHODS,
  CORS_HEADERS,
} = securityConfig;

||------------------------------------------------------||

File: src\config\server.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const serverSchema = object({
  SERVER_HOST: string().hostname().default('0.0.0.0'),
  SERVER_PORT: number().integer().min(1).max(65535).default(3000),
  NODE_ENV: string()
    .valid('development', 'production', 'testing')
    .default('development'),
  BASE_URL: string().uri().required(),
}).unknown();

const { value: serverConfig, error } = serverSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Server configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  SERVER_HOST,
  SERVER_PORT,
  NODE_ENV,
  BASE_URL,
} = serverConfig;

||------------------------------------------------------||

File: src\config\sessionCookies.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const sessionCookiesSchema = object({
  SESSION_SECRET: string().required(),
  SESSION_MAX_AGE: number().integer().min(1).required(),
  COOKIE_SECRET: string().required(),
  COOKIE_MAX_AGE: number().integer().min(1).required(),
}).unknown(); // السماح بمتغيرات إضافية

// التحقق من القيم
const { value: sessionCookiesConfig, error } = sessionCookiesSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
    throw new Error(
        `Session Cookies configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
    );
}

export const {
    SESSION_SECRET,
    SESSION_MAX_AGE,
    COOKIE_SECRET,
    COOKIE_MAX_AGE,
} = sessionCookiesConfig;

||------------------------------------------------------||

File: src\config\status.config.js
Content:
const statusCodes = {
    // 100 informational
    CONTINUE: 100,
    SWITCHING_PROTOCOLS: 101,
    PROCESSING: 102,
    EARLY_HINTS: 103,
    // 200 success
    OK: 200,
    CREATED: 201,
    ACCEPTED: 202,
    NON_AUTHORITATIVE_INFORMATION: 203,
    NO_CONTENT: 204,
    RESET_CONTENT: 205,
    PARTIAL_CONTENT: 206,
    MULTI_STATUS: 207,
    ALREADY_REPORTED: 208,
    IM_USED: 226,
    // 300 redirection
    MULTIPLE_CHOICES: 300,
    MOVED_PERMANENTLY: 301,
    FOUND: 302,
    SEE_OTHER: 303,
    NOT_MODIFIED: 304,
    USE_PROXY: 305,
    SWITCH_PROXY: 306,
    TEMPORARY_REDIRECT: 307,
    PERMANENT_REDIRECT: 308,
    // 400 client errors
    BAD_REQUEST: 400,
    UNAUTHORIZED: 401,
    FORBIDDEN: 403,
    NOT_FOUND: 404,
    METHOD_NOT_ALLOWED: 405,
    NOT_ACCEPTABLE: 406,
    REQUEST_TIMEOUT: 408,
    CONFLICT: 409,
    GONE: 410,
    LENGTH_REQUIRED: 411,
    PRECONDITION_FAILED: 412,
    PAYLOAD_TOO_LARGE: 413,
    URI_TOO_LONG: 414,
    UNSUPPORTED_MEDIA_TYPE: 415,
    RANGE_NOT_SATISFIABLE: 416,
    EXPECTATION_FAILED: 417,
    IM_A_TEAPOT: 418,
    MISDIRECTED_REQUEST: 421,
    UNPROCESSABLE_ENTITY: 422,
    LOCKED: 423,
    FAILED_DEPENDENCY: 424,
    UPGRADE_REQUIRED: 426,
    PRECONDITION_REQUIRED: 428,
    TOO_MANY_REQUESTS: 429,
    REQUEST_HEADER_FIELDS_TOO_LARGE: 431,
    UNAVAILABLE_FOR_LEGAL_REASONS: 451,
    // 500 server errors
    INTERNAL_SERVER_ERROR: 500,
    NOT_IMPLEMENTED: 501,
    BAD_GATEWAY: 502,
    SERVICE_UNAVAILABLE: 503,
    GATEWAY_TIMEOUT: 504,
    HTTP_VERSION_NOT_SUPPORTED: 505,
    VARIANT_ALSO_NEGOTIATES: 506,
    INSUFFICIENT_STORAGE: 507,
    LOOP_DETECTED: 508,
    NOT_EXTENDED: 510,
    NETWORK_AUTHENTICATION_REQUIRED: 511
};

export default statusCodes;

||------------------------------------------------------||

File: src\config\webhooks.config.js
Content:
import { object, string, number } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const webhooksSchema = object({
  WEBHOOK_SECRET: string().required(),
  WEBHOOK_RETRY_COUNT: number().integer().min(0).default(3),
  WEBHOOK_RETRY_DELAY: number().integer().min(0).default(5000),
}).unknown();

const { value: webhooksConfig, error } = webhooksSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `Webhooks configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  WEBHOOK_SECRET,
  WEBHOOK_RETRY_COUNT,
  WEBHOOK_RETRY_DELAY,
} = webhooksConfig;

||------------------------------------------------------||

File: src\config\websocket.config.js
Content:
import { object, number, string } from 'joi';

// تعريف Schema للتحقق من الإعدادات
const websocketSchema = object({
  WEBSOCKET_PORT: number().integer().min(1).max(65535).default(8080),
  WEBSOCKET_PATH: string().default('/ws'),
  WEBSOCKET_ORIGIN: string().default('*'),
}).unknown();

const { value: websocketConfig, error } = websocketSchema.validate(process.env, {
  abortEarly: false,
});

if (error) {
  throw new Error(
    `WebSocket configuration validation error: ${error.details.map((x) => x.message).join(', ')}`
  );
}

export const {
  WEBSOCKET_PORT,
  WEBSOCKET_PATH,
  WEBSOCKET_ORIGIN,
} = websocketConfig;

||------------------------------------------------------||

File: src\middlewares\authentication\auth.middleware.js
Content:
import { verify } from 'jsonwebtoken';
import { JWT_SECRET } from '../../config/security.config.js';

const authMiddleware = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];

  if (!token) {
    res.status(401);
    return next(new Error('Unauthorized: No token provided'));
  }

  try {
    const decoded = verify(token, JWT_SECRET);
    req.user = decoded; // ربط بيانات المستخدم بالطلب
    next();
  } catch (err) {
    res.status(401);
    next(new Error('Unauthorized: Invalid token'));
  }
};

export default authMiddleware;

||------------------------------------------------------||

File: src\middlewares\authentication\websocketAuth.middleware.js
Content:
import { verify } from 'jsonwebtoken';
import { JWT_SECRET } from '../../config/security.config.js';

const wsAuthMiddleware = (socket, next) => {
  const token = socket.handshake.query.token;

  if (!token) {
    return next(new Error('Unauthorized: No token provided'));
  }

  try {
    const decoded = verify(token, JWT_SECRET);
    socket.user = decoded;
    next();
  } catch (err) {
    next(new Error('Unauthorized: Invalid token'));
  }
};

export default wsAuthMiddleware;

||------------------------------------------------------||

File: src\middlewares\errors\errorHandler.middleware.js
Content:
import { NODE_ENV } from '../../config/server.config.js';

const errorHandlerMiddleware = (err, req, res, next) => {
    const statusCode = res.statusCode !== 200 ? res.statusCode : 500;
    const message = NODE_ENV === 'production' ? 'Something went wrong' : err.message;
    const stack = NODE_ENV === 'production' ? null : err.stack;
    const messageBody = {
        success: false,
        error: {message, stack}
    };
  
    console.error(`[Error] ${statusCode} - ${err.message} - ${req.originalUrl} - ${req.method} - ${req.ip}`, err.stack);
    
    res.status(statusCode).json(messageBody);
  };
  
  export default errorHandlerMiddleware;

||------------------------------------------------------||

File: src\middlewares\errors\notFound.middleware.js
Content:
const notFoundMiddleware = (req, res, next) => {
    res.status(404);
    next(new Error(`404 Not Found - ${req.originalUrl}`));
  };
  
  export default notFoundMiddleware;

||------------------------------------------------------||

File: src\middlewares\logging\requestLogger.middleware.js
Content:
import morgan from 'morgan';

const requestLogger = morgan(':method :url :status :res[content-length] - :response-time ms');

export default requestLogger;

||------------------------------------------------------||

File: src\middlewares\logging\responseTime.middleware.js
Content:
import responseTime from 'response-time';

const responseTimeMiddleware = responseTime((req, res, time) => {
  console.log(`[Response Time] ${req.method} ${req.url} - ${time.toFixed(2)}ms`);
});

export default responseTimeMiddleware;

||------------------------------------------------------||

File: src\middlewares\permissions\permissions.middleware.js
Content:
import Permissions from '../../utils/permissions/permissions.util.js';

export const hasPermissions = (...permissions) => (req, res, next) => {
    const userPermissions = new Permissions(req.user.permissions);
  
    if (!userPermissions.has(permissions)) {
      res.status(403);
      return next(new Error('You do not have the required permissions'));
    }
  
    next();
};

export const AnyPermission = (...permissions) => (req, res, next) => {
    const userPermissions = new Permissions(req.user.permissions);
  
    if (!userPermissions.any(permissions)) {
      res.status(403);
      return next(new Error('You do not have the required permissions'));
    }
  
    next();
}

||------------------------------------------------------||

File: src\middlewares\security\cors.middleware.js
Content:
import cors from 'cors';
import { CORS_ORIGIN, CORS_METHODS, CORS_HEADERS } from '../../config/security.config.js';

const corsMiddleware = cors({
  origin: CORS_ORIGIN,
  methods: CORS_METHODS,
  allowedHeaders: CORS_HEADERS,
});

export default corsMiddleware;

||------------------------------------------------------||

File: src\middlewares\security\helmet.middleware.js
Content:
import helmet from 'helmet';

const helmetMiddleware = helmet({
  contentSecurityPolicy: {
    useDefaults: true,
    directives: {
      defaultSrc: ["'self'"], // السماح فقط بالمصادر من نفس الخادم
      scriptSrc: [
        "'self'", 
        "'unsafe-inline'", // استخدم فقط لو محتاجه لبيئة التطوير
        // "https://trustedscripts.example.com",
      ],
      styleSrc: [
        "'self'",
        "'unsafe-inline'", // استخدم لو محتاج CSS inline
        // "https://trustedstyles.example.com",
      ],
      imgSrc: ["'self'", "data:"/*, "https://trustedimages.example.com"*/], // الصور
      connectSrc: ["'self'"/*, "https://api.example.com"*/], // API
      fontSrc: ["'self'"/*, "https://fonts.gstatic.com"*/], // الخطوط
      objectSrc: ["'none'"], // منع objects بالكامل
      frameSrc: ["'none'"], // منع iframe بالكامل
      upgradeInsecureRequests: [], // ترقية كل الروابط من HTTP لـ HTTPS
    },
  },
  crossOriginEmbedderPolicy: true, // سياسة المصادر المدمجة عبر الأصل
  crossOriginResourcePolicy: { policy: 'same-origin' }, // سياسة المصادر عبر الأصل
  hsts: {
    maxAge: 31536000, // إجبار HTTPS لمدة سنة (ثواني)
    includeSubDomains: true, // تطبيقه على كل الـ subdomains
    preload: true, // لدعم الـ HSTS preload
  },
  frameguard: {
    action: 'deny', // منع تحميل الصفحة في iframe
  },
  dnsPrefetchControl: {
    allow: false, // منع المتصفح من DNS prefetching
  },
  referrerPolicy: {
    policy: 'strict-origin-when-cross-origin', // سياسة المرجع Referrer Policy
  },
  xssFilter: false, // حماية XSS (قديم ولكنه مفيد)
  noSniff: true, // منع Guessing Type للملفات
  permittedCrossDomainPolicies: {
    policy: 'none', // منع استخدام crossdomain.xml
  },
  hidePoweredBy: true, // إخفاء هيدر Express
});

export default helmetMiddleware;

||------------------------------------------------------||

File: src\middlewares\security\rateLimiter.middleware.js
Content:
import { RateLimiterMemory } from 'rate-limit-flexible';

// إعداد الـ Rate Limiter العام لكل المستخدمين
const generalLimiter = new RateLimiterMemory({
    points: 100, // عدد الطلبات المسموحة
    duration: 60, // خلال 60 ثانية (دقيقة واحدة)
});

// إعداد الـ Rate Limiter لمحاولات تسجيل الدخول (أكثر صرامة)
const loginLimiter = new RateLimiterMemory({
    points: 5, // مسموح بـ 5 محاولات فقط
    duration: 60 * 5, // خلال 5 دقائق
});

// ميدل وير عام للحد من الطلبات
const rateLimiterMiddleware = (req, res, next) => {
    generalLimiter.consume(req.ip)
        .then(() => {
            next(); // كمل الطلب عادي
        })
        .catch(() => {
            res.status(429);
            next(new Error('Too many requests, please try again later.'));
        });
};

// ميدل وير خاص بتسجيل الدخول
const loginRateLimiter = (req, res, next) => {
    loginLimiter.consume(req.ip)
        .then(() => {
            next();
        })
        .catch(() => {
          res.status(429);
          next(new Error('Too many login attempts, please try again later.'));
        });
};

// تصدير الميدل وير
export default { rateLimiterMiddleware, loginRateLimiter };

||------------------------------------------------------||

File: src\middlewares\security\session.middleware.js
Content:
import session from 'express-session';
const RedisStore = require('connect-redis')(session); // استخدام Redis لتخزين الجلسات
import redisClient from '../../modules/cache/redis/index.js'; // اتصال Redis من ملف config
import { SESSION_SECRET } from '../../config/sessionCookies.config.js'; // اتصال Redis من ملف config
import { NODE_ENV } from '../../config/server.config.js'; // اتصال Redis من ملف config

const sessionMiddleware = session({
  store: new RedisStore({ client: redisClient }),
  secret: SESSION_SECRET || 'supersecretkey', // المفتاح السري للجلسات
  resave: false, // منع إعادة حفظ الجلسة لو مفيش تغييرات
  saveUninitialized: false, // منع إنشاء جلسات جديدة غير ضرورية
  cookie: {
    secure: NODE_ENV === 'production', // الجلسات تكون آمنة فقط في الإنتاج
    httpOnly: true, // حماية الكوكيز من الـ JavaScript
    maxAge: 1000 * 60 * 60 * 24, // مدة الجلسة: يوم كامل
  },
});

export default sessionMiddleware;

||------------------------------------------------------||

File: src\middlewares\security\xssClean.middleware.js
Content:
import xssClean from 'xss-clean';

const xssProtectionMiddleware = xssClean();

export default xssProtectionMiddleware;

||------------------------------------------------------||

File: src\middlewares\validation\routesValidation.config.js
Content:
import { object, string, boolean, number } from "joi";

// export const userSchema = object({
//     email: string().email().required(),
//     password: string().min(6).required(),
// });

||------------------------------------------------------||

File: src\middlewares\validation\validation.middleware.js
Content:
const validationMiddleware = (schema) => (req, res, next) => {
    const { error, value } = schema.validate(req.body, { abortEarly: false });
  
    if (error) {
        res.status(400);
        return next(new Error(error.details.map((err) => err.message).join(', ')));
    }

    if(!req.value) req.value = {};
    req.value.body = value;
  
    next();
  };
  
  export default validationMiddleware;

||------------------------------------------------------||

File: src\modules\cache\redis\config\redis.config.js
Content:
import Redis from 'ioredis';
import { redis } from '../../../../config/database.config.js';

const redisClient = new Redis({
  host: redis.host,
  port: redis.port,
  password: redis.password,
  db: redis.db,
});

redisClient.on('connect', () => {
  console.log('Connected to Redis successfully.');
});

redisClient.on('error', (err) => {
  console.error('Redis connection error:', err);
});

export default redisClient;

||------------------------------------------------------||

File: src\modules\cache\redis\index.js
Content:
import redisClient from './config/redis.config.js';
import UserCacheService from './services/UserCache.service.js';
import ProductCacheService from './services/ProductCache.service.js';

export { redisClient, UserCacheService, ProductCacheService };

||------------------------------------------------------||

File: src\modules\cache\redis\repositories\UserCache.repository.js
Content:
import redisClient from '../config/redis.config.js';

class UserCacheRepository {
  async setUser(userId, userData, ttl = 3600) {
    await redisClient.set(`user:${userId}`, JSON.stringify(userData), 'EX', ttl);
  }

  async getUser(userId) {
    const userData = await redisClient.get(`user:${userId}`);
    return userData ? JSON.parse(userData) : null;
  }

  async deleteUser(userId) {
    await redisClient.del(`user:${userId}`);
  }
}

export default new UserCacheRepository();

||------------------------------------------------------||

File: src\modules\cache\redis\services\UserCache.service.js
Content:
import UserCacheRepository from '../repositories/UserCache.repository.js';

class UserCacheService {
  async cacheUser(userId, userData, ttl = 3600) {
    await UserCacheRepository.setUser(userId, userData, ttl);
  }

  async getCachedUser(userId) {
    return await UserCacheRepository.getUser(userId);
  }

  async removeCachedUser(userId) {
    await UserCacheRepository.deleteUser(userId);
  }
}

export default new UserCacheService();

||------------------------------------------------------||

File: src\modules\database\mongoDB\config\db.config.js
Content:
import mongoose from 'mongoose';
import { mongodb } from '../../../../config/database.config.js';

const connectDB = async () => {
     try {
          await mongoose.connect(mongodb.uri, {
               useNewUrlParser: true,
               useUnifiedTopology: true,
               useCreateIndex: true,
               useFindAndModify: false
          });
          console.log('MongoDB connected successfully.');

          mongoose.connection.on('connected', () => {
               console.log('Mongoose connected to DB');
          });
             
          mongoose.connection.on('error', (err) => {
               console.error('Mongoose connection error:', err);
          });
             
          mongoose.connection.on('disconnected', () => {
               console.log('Mongoose disconnected from DB');
          });

     } catch (err) {
          console.error('MongoDB connection error:', err);
          //process.exit(1); // إغلاق التطبيق في حالة خطأ
     }
};

export default connectDB;

||------------------------------------------------------||

File: src\modules\database\mongoDB\index.js
Content:
import connectDB from './config/db.config.js';
import { User } from './models/index.js';
import UserService from './services/User.service.js';

// نبدأ الاتصال بقاعدة البيانات
connectDB();

export { User, UserService };

||------------------------------------------------------||

File: src\modules\database\mongoDB\models\index.js
Content:
import User from './User.model.js';

export { User };

||------------------------------------------------------||

File: src\modules\database\mongoDB\models\User.model.js
Content:
import mongoose from 'mongoose';
import { hashPassword } from '../../../../utils/hash.util.js';

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

userSchema.pre('save', async function (next) {
  if (this.isModified('password')) {
    this.password = await hashPassword(this.password);
  }
  next();
});

const User = mongoose.model('User', userSchema);

export default User;

||------------------------------------------------------||

File: src\modules\database\mongoDB\repositories\User.repository.js
Content:
import { User } from '../models/index.js';

class UserRepository {
  async create(userData) {
    const user = new User(userData);
    return await user.save();
  }

  async findById(id) {
    return await User.findById(id);
  }

  async findByEmail(email) {
    return await User.findOne({ email });
  }

  async update(id, userData) {
    return await User.findByIdAndUpdate(id, userData, { new: true });
  }

  async delete(id) {
    return await User.findByIdAndDelete(id);
  }
}

export default new UserRepository();

||------------------------------------------------------||

File: src\modules\database\mongoDB\services\User.service.js
Content:
import UserRepository from '../repositories/User.repository.js';
// import { hashPassword } from '../../../../utils/hash.util.js';

class UserService {
  async createUser(userData) {
    // userData.password = await hashPassword(userData.password);
    return await UserRepository.create(userData);
  }

  async getUserById(id) {
    return await UserRepository.findById(id);
  }

  async getUserByEmail(email) {
    return await UserRepository.findByEmail(email);
  }

  async updateUser(id, userData) {
    if (userData.password) {
      // userData.password = await hashPassword(userData.password);
    }
    return await UserRepository.update(id, userData);
  }

  async deleteUser(id) {
    return await UserRepository.delete(id);
  }
}

export default new UserService();

||------------------------------------------------------||

File: src\modules\database\mySQL\.sequelizerc
Content:
// .sequelizerc

import { resolve } from 'path';

export default {
  config: resolve('config', 'db.config.js'),
  'models-path': resolve('models'),
  'seeders-path': resolve('seeders'),
  'migrations-path': resolve('migrations'),
};

||------------------------------------------------------||

File: src\modules\database\mySQL\config\db.config.js
Content:
import { Sequelize } from 'sequelize';
import { mysql } from '../../../../config/database.config.js';
import { NODE_ENV } from '../../../../config/server.config.js';

const sequelize = new Sequelize(mysql.database, mysql.user, mysql.password, {
  host: mysql.host,
  port: mysql.port,
  dialect: 'mysql',
  logging: NODE_ENV !== 'development' ? console.log : false,
  pool: {
    max: 5, // أقصى عدد اتصالات
    min: 0,
    acquire: 30000,
    idle: 10000,
  },
});

export const development = { // Don't change the name of this constant
     username: mysql.user,
     password: mysql.password,
     database: mysql.database,
     host: mysql.host,
     port: mysql.port,
     dialect: 'mysql',
     dialectOptions: {
          bigNumberStrings: true,
     },
};
export const test = { // Don't change the name of this constant
     username: mysql.user,
     password: mysql.password,
     database: mysql.database,
     host: mysql.host,
     port: mysql.port,
     dialect: 'mysql',
     dialectOptions: {
          bigNumberStrings: true,
     },
};
export const production = { // Don't change the name of this constant
     username: mysql.user,
     password: mysql.password,
     database: mysql.database,
     host: mysql.host,
     port: mysql.port,
     dialect: 'mysql',
     dialectOptions: {
          bigNumberStrings: true,
     },
};

export default sequelize;

||------------------------------------------------------||

File: src\modules\database\mySQL\index.js
Content:
import sequelize from './config/db.config.js';
import { User } from './models/index.js';
import UserService from './services/User.service.js';

export { sequelize, User, UserService };

||------------------------------------------------------||

File: src\modules\database\mySQL\models\index.js
Content:
import sequelize from '../config/db.config.js';
import User from './User.model.js';

// تعريف العلاقات بين الـ Models هنا (لو في علاقات)
// User.hasMany(Product, { foreignKey: 'userId' });
// Product.belongsTo(User, { foreignKey: 'userId' });

// Sync كل الـ Models مع قاعدة البيانات
sequelize.sync().then(() => {
  console.log('All models were synchronized successfully.');
});

export { User };

||------------------------------------------------------||

File: src\modules\database\mySQL\models\User.model.js
Content:
import { DataTypes } from 'sequelize';
import sequelize from '../config/db.config.js';

const User = sequelize.define('User', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  createdAt: {
    type: DataTypes.DATE,
    defaultValue: DataTypes.NOW,
  },
  updatedAt: {
    type: DataTypes.DATE,
    defaultValue: DataTypes.NOW,
  },
});

export default User;

||------------------------------------------------------||

File: src\modules\database\mySQL\repositories\User.repository.js
Content:
import { User } from '../models/index.js';

class userRepository {
  async create(userData) {
    return await User.create(userData);
  }

  async findById(id) {
    return await User.findByPk(id);
  }

  async findByEmail(email) {
    return await User.findOne({ where: { email } });
  }

  async update(id, userData) {
    const user = await User.findByPk(id);
    if (user) {
      return await user.update(userData);
    }
    return null;
  }

  async delete(id) {
    const user = await User.findByPk(id);
    if (user) {
      return await user.destroy();
    }
    return null;
  }
}

export default new userRepository();

||------------------------------------------------------||

File: src\modules\database\mySQL\services\User.service.js
Content:
import UserRepository from '../repositories/User.repository.js';
import { hashPassword } from '../../../../utils/hash.util.js';

class UserService {
  async createUser(userData) {
    userData.password = await hashPassword(userData.password);
    return await UserRepository.create(userData);
  }

  async getUserById(id) {
    return await UserRepository.findById(id);
  }

  async getUserByEmail(email) {
    return await UserRepository.findByEmail(email);
  }

  async updateUser(id, userData) {
    if (userData.password) {
      userData.password = await hashPassword(userData.password);
    }
    return await UserRepository.update(id, userData);
  }

  async deleteUser(id) {
    return await UserRepository.delete(id);
  }
}

export default new UserService();

||------------------------------------------------------||

File: src\modules\database\postgreSQL\.sequelizerc
Content:
// .sequelizerc

import { resolve } from 'path';

export default {
  config: resolve('config', 'db.config.js'),
  'models-path': resolve('models'),
  'seeders-path': resolve('seeders'),
  'migrations-path': resolve('migrations'),
};

||------------------------------------------------------||

File: src\modules\database\postgreSQL\config\db.config.js
Content:
import { Sequelize } from 'sequelize';
import { postgresql } from '../../../../config/database.config.js';
import { NODE_ENV } from '../../../../config/server.config.js';

const sequelize = new Sequelize(postgresql.database, postgresql.user, postgresql.password, {
  host: postgresql.host,
  port: postgresql.port,
  dialect: 'postgres',
  logging: NODE_ENV !== 'development' ? console.log : false,
  pool: {
    max: 5, // أقصى عدد اتصالات
    min: 0,
    acquire: 30000,
    idle: 10000,
  },
});

export const development = { // Don't change the name of this constant
     username: postgresql.user,
     password: postgresql.password,
     database: postgresql.database,
     host: postgresql.host,
     port: postgresql.port,
     dialect: 'postgres',
     dialectOptions: {
          bigNumberStrings: true,
     },
};
export const test = { // Don't change the name of this constant
     username: postgresql.user,
     password: postgresql.password,
     database: postgresql.database,
     host: postgresql.host,
     port: postgresql.port,
     dialect: 'postgres',
     dialectOptions: {
          bigNumberStrings: true,
     },
};
export const production = { // Don't change the name of this constant
     username: postgresql.user,
     password: postgresql.password,
     database: postgresql.database,
     host: postgresql.host,
     port: postgresql.port,
     dialect: 'postgres',
     dialectOptions: {
          bigNumberStrings: true,
     },
};

export default sequelize;

||------------------------------------------------------||

File: src\modules\database\postgreSQL\index.js
Content:
import sequelize from './config/db.config.js';
import { User } from './models/index.js';
import UserService from './services/User.service.js';

export { sequelize, User, UserService };

||------------------------------------------------------||

File: src\modules\database\postgreSQL\models\index.js
Content:
import sequelize from '../config/db.config.js';
import User from './User.model.js';

// تعريف العلاقات بين الـ Models هنا (لو في علاقات)
// User.hasMany(Product, { foreignKey: 'userId' });
// Product.belongsTo(User, { foreignKey: 'userId' });

// Sync كل الـ Models مع قاعدة البيانات
sequelize.sync().then(() => {
  console.log('All models were synchronized successfully.');
});

export { User };

||------------------------------------------------------||

File: src\modules\database\postgreSQL\models\User.model.js
Content:
import { DataTypes } from 'sequelize';
import sequelize from '../config/db.config.js';

const User = sequelize.define('User', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  createdAt: {
    type: DataTypes.DATE,
    defaultValue: DataTypes.NOW,
  },
  updatedAt: {
    type: DataTypes.DATE,
    defaultValue: DataTypes.NOW,
  },
});

export default User;

||------------------------------------------------------||

File: src\modules\database\postgreSQL\repositories\User.repository.js
Content:
import { User } from '../models/index.js';

class userRepository {
  async create(userData) {
    return await User.create(userData);
  }

  async findById(id) {
    return await User.findByPk(id);
  }

  async findByEmail(email) {
    return await User.findOne({ where: { email } });
  }

  async update(id, userData) {
    const user = await User.findByPk(id);
    if (user) {
      return await user.update(userData);
    }
    return null;
  }

  async delete(id) {
    const user = await User.findByPk(id);
    if (user) {
      return await user.destroy();
    }
    return null;
  }
}

export default new userRepository();

||------------------------------------------------------||

File: src\modules\database\postgreSQL\services\User.service.js
Content:
import UserRepository from '../repositories/User.repository.js';
import { hashPassword } from '../../../../utils/hash.util.js';

class UserService {
  async createUser(userData) {
    userData.password = await hashPassword(userData.password);
    return await UserRepository.create(userData);
  }

  async getUserById(id) {
    return await UserRepository.findById(id);
  }

  async getUserByEmail(email) {
    return await UserRepository.findByEmail(email);
  }

  async updateUser(id, userData) {
    if (userData.password) {
      userData.password = await hashPassword(userData.password);
    }
    return await UserRepository.update(id, userData);
  }

  async deleteUser(id) {
    return await UserRepository.delete(id);
  }
}

export default new UserService();

||------------------------------------------------------||

File: src\utils\emailHelper.util.js
Content:
import { createTransport } from 'nodemailer';
import { EMAIL_USER, EMAIL_PASSWORD } from '../config/notifications.config.js';

const transporter = createTransport({
    service: 'gmail',
    auth: {
        user: EMAIL_USER,
        pass: EMAIL_PASSWORD,
    },
});

const sendEmail = async (to, subject, text) => {
    try {
        await transporter.sendMail({ from: EMAIL_USER, to, subject, text });
        return true;
    } catch (error) {
        throw error;
    }
};

export default { sendEmail };

||------------------------------------------------------||

File: src\utils\fileHelper.util.js
Content:
import { existsSync, unlinkSync } from 'fs';
import { join } from 'path';

const saveFile = (file, folder = 'uploads') => {
    const filePath = join(__dirname, '../', folder, file.name);
    file.mv(filePath, (err) => {
        if (err) throw err;
    });
    return filePath;
};

const deleteFile = (filePath) => {
    if (existsSync(filePath)) {
        unlinkSync(filePath);
    }
};

export default { saveFile, deleteFile };

||------------------------------------------------------||

File: src\utils\files\index.js
Content:
import GoogleDriveHandler from './utils/GoogleDriveHelper.util.js';
import S3Handler from './utils/s3Handler.util.js';
import FileHandler from './utils/localStorage.util.js';

export { GoogleDriveHandler, S3Handler, FileHandler };

||------------------------------------------------------||

File: src\utils\files\utils\GoogleDriveHelper.util.js
Content:
import { google } from 'googleapis';
import fs from 'fs';

class GoogleDriveHandler {
  constructor(credentialsPath, createIfNotExist = false) {
    // eslint-disable-next-line global-require
    this.credentials = require(credentialsPath);
    this.auth = new google.auth.GoogleAuth({
      credentials: this.credentials,
      scopes: ['https://www.googleapis.com/auth/drive'],
    });
    this.drive = google.drive({ version: 'v3', auth: this.auth });
    this.createIfNotExist = createIfNotExist;
  }

  async uploadFile(file, folderId = null) {
    try {
      if (!file || !file.originalname || !file.path) {
        throw new Error('Invalid file object provided.');
      }

      const fileMetadata = {
        name: file.originalname,
        parents: folderId ? [folderId] : [],
      };

      const media = {
        mimeType: file.mimetype,
        body: fs.createReadStream(file.path),
      };

      const response = await this.drive.files.create({
        resource: fileMetadata,
        media,
        fields: 'id',
      });

      // Optionally delete the local file after upload
      fs.unlinkSync(file.path);

      return response.data.id; // File ID
    } catch (error) {
      console.error('Error uploading file:', error.message);
      throw error;
    }
  }

  async deleteFile(fileId) {
    try {
      await this.drive.files.delete({ fileId });
    } catch (error) {
      console.error('Error deleting file:', error.message);
      throw error;
    }
  }

  async getFileUrl(fileId) {
    try {
      await this.drive.permissions.create({
        fileId,
        requestBody: {
          role: 'reader',
          type: 'anyone',
        },
      });

      const response = await this.drive.files.get({
        fileId,
        fields: 'webViewLink',
      });

      return response.data.webViewLink;
    } catch (error) {
      console.error('Error getting file URL:', error.message);
      throw error;
    }
  }

  async updateFile(fileId, file) {
    try {
      if (!file || !file.path || !file.mimetype) {
        throw new Error('Invalid file object provided.');
      }

      const media = {
        mimeType: file.mimetype,
        body: fs.createReadStream(file.path),
      };

      const response = await this.drive.files.update({
        fileId,
        media,
        fields: 'id',
      });

      return response.data.id; // Updated File ID
    } catch (error) {
      console.error('Error updating file:', error.message);
      throw error;
    }
  }

  async createFolder(folderName, parentFolderId = null) {
    try {
      const fileMetadata = {
        name: folderName,
        mimeType: 'application/vnd.google-apps.folder',
        parents: parentFolderId ? [parentFolderId] : [],
      };

      const response = await this.drive.files.create({
        resource: fileMetadata,
        fields: 'id',
      });

      return response.data.id; // Folder ID
    } catch (error) {
      console.error('Error creating folder:', error.message);
      throw error;
    }
  }

  async readFolder(folderId) {
    try {
      const response = await this.drive.files.list({
        q: `'${folderId}' in parents`,
        fields: 'files(id, name, mimeType)',
      });

      return response.data.files;
    } catch (error) {
      console.error('Error reading folder:', error.message);
      throw error;
    }
  }

  async deleteFolder(folderId) {
    try {
      await this.drive.files.delete({ fileId: folderId });
    } catch (error) {
      console.error('Error deleting folder:', error.message);
      throw error;
    }
  }

  async getFileMetadata(fileId) {
    try {
      const response = await this.drive.files.get({
        fileId,
        fields: 'id, name, mimeType, size',
      });
      return response.data;
    } catch (error) {
      console.error('Error getting file metadata:', error.message);
      throw error;
    }
  }

  async findOrCreateFolder(folderName, parentFolderId = null) {
    try {
      const response = await this.drive.files.list({
        q: `'${parentFolderId || 'root'}' in parents and name = '${folderName}' and mimeType = 'application/vnd.google-apps.folder'`,
        fields: 'files(id, name)',
      });

      if (response.data.files.length > 0) {
        return response.data.files[0].id; // Return existing folder ID
      }

      // If folder doesn't exist, create it
      if (this.createIfNotExist) {
        return await this.createFolder(folderName, parentFolderId);
      }

      throw new Error(`Folder "${folderName}" not found.`);
    } catch (error) {
      console.error('Error finding or creating folder:', error.message);
      throw error;
    }
  }
}

export default GoogleDriveHandler;

||------------------------------------------------------||

File: src\utils\files\utils\localStorage.util.js
Content:
import fs from 'fs';
import path from 'path';
import sharp from 'sharp';
import archiver from 'archiver';
import { exec } from 'child_process';
import crypto from 'crypto';

class FileHandler {
  constructor(filePath, createIfNotExist = false) {
    this.filePath = filePath;
    this.createIfNotExist = createIfNotExist;

    // Ensure file existence if required
    if (this.createIfNotExist && !fs.existsSync(filePath)) {
      fs.writeFileSync(filePath, ''); // Create an empty file if it doesn't exist
    }
  }

  // Upload a file to a destination folder
  async uploadFile(file, destination = './uploads') {
    try {
      await this.createFolder(destination);
      const filePath = path.join(destination, file.originalname);
      await fs.promises.writeFile(filePath, file.buffer);
      return filePath;
    } catch (error) {
      console.error('Error uploading file:', error.message);
      throw error;
    }
  }

  // Delete the file
  async deleteFile() {
    try {
      if (fs.existsSync(this.filePath)) {
        await fs.promises.unlink(this.filePath);
      }
    } catch (error) {
      console.error('Error deleting file:', error.message);
      throw error;
    }
  }

  // Check if file exists
  fileExists() {
    return fs.existsSync(this.filePath);
  }

  // Move a file to a new destination
  async moveFile(destinationPath) {
    try {
      await fs.promises.rename(this.filePath, destinationPath);
    } catch (error) {
      console.error('Error moving file:', error.message);
      throw error;
    }
  }

  // Rename the file
  async renameFile(newName) {
    try {
      const newPath = path.join(path.dirname(this.filePath), newName);
      await fs.promises.rename(this.filePath, newPath);
      return newPath;
    } catch (error) {
      console.error('Error renaming file:', error.message);
      throw error;
    }
  }

  // Get file information
  getFileInfo() {
    try {
      const stats = fs.statSync(this.filePath);
      return {
        name: path.basename(this.filePath),
        size: stats.size,
        type: path.extname(this.filePath),
        createdAt: stats.birthtime,
        updatedAt: stats.mtime,
      };
    } catch (error) {
      console.error('Error fetching file info:', error.message);
      throw error;
    }
  }

  // Create a folder if it doesn't exist
  async createFolder(folderPath) {
    try {
      if (!fs.existsSync(folderPath)) {
        await fs.promises.mkdir(folderPath, { recursive: true });
      }
    } catch (error) {
      console.error('Error creating folder:', error.message);
      throw error;
    }
  }

  // Check if a folder exists
  folderExists(folderPath) {
    return fs.existsSync(folderPath);
  }

  // Read contents of a folder
  async readFolder(folderPath) {
    try {
      return await fs.promises.readdir(folderPath);
    } catch (error) {
      console.error('Error reading folder:', error.message);
      throw error;
    }
  }

  // Delete a folder and its contents
  async deleteFolder(folderPath) {
    try {
      if (fs.existsSync(folderPath)) {
        await fs.promises.rm(folderPath, { recursive: true });
      }
    } catch (error) {
      console.error('Error deleting folder:', error.message);
      throw error;
    }
  }

  // Resize an image
  async resizeImage(width, height) {
    try {
      const buffer = fs.readFileSync(this.filePath);
      const resizedBuffer = await sharp(buffer).resize(width, height).toBuffer();
      fs.writeFileSync(this.filePath, resizedBuffer);
    } catch (error) {
      console.error('Error resizing image:', error.message);
      throw error;
    }
  }

  // Convert image format
  async convertImageFormat(format) {
    try {
      const buffer = fs.readFileSync(this.filePath);
      const convertedBuffer = await sharp(buffer).toFormat(format).toBuffer();
      fs.writeFileSync(this.filePath, convertedBuffer);
    } catch (error) {
      console.error('Error converting image format:', error.message);
      throw error;
    }
  }

  // Compress an image
  async compressImage(quality = 80) {
    try {
      const buffer = fs.readFileSync(this.filePath);
      const compressedBuffer = await sharp(buffer).jpeg({ quality }).toBuffer();
      fs.writeFileSync(this.filePath, compressedBuffer);
    } catch (error) {
      console.error('Error compressing image:', error.message);
      throw error;
    }
  }

  // Compress multiple files into a ZIP archive
  async compressFiles(files, outputPath) {
    return new Promise((resolve, reject) => {
      try {
        const output = fs.createWriteStream(outputPath);
        const archive = archiver('zip');

        output.on('close', () => resolve(outputPath));
        archive.on('error', (err) => reject(err));

        archive.pipe(output);
        files.forEach((file) => {
          archive.file(file.path, { name: file.originalname });
        });
        archive.finalize();
      } catch (error) {
        console.error('Error compressing files:', error.message);
        reject(error);
      }
    });
  }

  // Scan a file for malware
  async scanFile() {
    return new Promise((resolve, reject) => {
      exec(`clamscan ${this.filePath}`, (error, stdout) => {
        if (error) {
          reject(new Error('File is infected or corrupted.'));
        } else {
          resolve(stdout.includes('Infected files: 0') ? 'File is safe.' : 'File is infected.');
        }
      });
    });
  }

  // Encrypt a file
  async encryptFile(secretKey) {
    try {
      const buffer = fs.readFileSync(this.filePath);
      const cipher = crypto.createCipheriv('aes-256-cbc', secretKey, secretKey.slice(0, 16));
      const encrypted = Buffer.concat([cipher.update(buffer), cipher.final()]);
      fs.writeFileSync(this.filePath, encrypted);
    } catch (error) {
      console.error('Error encrypting file:', error.message);
      throw error;
    }
  }

  // Decrypt a file
  async decryptFile(secretKey) {
    try {
      const encryptedBuffer = fs.readFileSync(this.filePath);
      const decipher = crypto.createDecipheriv('aes-256-cbc', secretKey, secretKey.slice(0, 16));
      const decrypted = Buffer.concat([decipher.update(encryptedBuffer), decipher.final()]);
      fs.writeFileSync(this.filePath, decrypted);
    } catch (error) {
      console.error('Error decrypting file:', error.message);
      throw error;
    }
  }
}

export default FileHandler;

||------------------------------------------------------||

File: src\utils\files\utils\s3Handler.util.js
Content:
import AWS from 'aws-sdk';
import { AWS_ACCESS_KEY, AWS_SECRET_KEY, AWS_BUCKET_NAME } from '../../../config/fileStorage.config.js';

class S3Handler {
  constructor(createIfNotExist = false) {
     this.s3 = new AWS.S3({
          AWS_ACCESS_KEY,
          AWS_SECRET_KEY,
     });
     this.bucketName = AWS_BUCKET_NAME;
     this.createIfNotExist = createIfNotExist;
  }

  // Upload a file to S3
  async uploadFile(file) {
    try {
      if (!file || !file.originalname || !file.buffer) {
        throw new Error('Invalid file object provided.');
      }

      const params = {
        Bucket: this.bucketName,
        Key: file.originalname,
        Body: file.buffer,
      };

      const data = await this.s3.upload(params).promise();
      return data.Location; // URL of the uploaded file
    } catch (error) {
      console.error('Error uploading file:', error.message);
      throw error;
    }
  }

  // Delete a file from S3
  async deleteFile(fileKey) {
    try {
      if (!fileKey) {
        throw new Error('Invalid file key provided.');
      }

      const params = {
        Bucket: this.bucketName,
        Key: fileKey,
      };

      await this.s3.deleteObject(params).promise();
    } catch (error) {
      console.error('Error deleting file:', error.message);
      throw error;
    }
  }

  // Get a public URL for a file
  async getFileUrl(fileKey) {
    try {
      if (!fileKey) {
        throw new Error('Invalid file key provided.');
      }

      return `https://${this.bucketName}.s3.amazonaws.com/${fileKey}`;
    } catch (error) {
      console.error('Error getting file URL:', error.message);
      throw error;
    }
  }

  // Update an existing file on S3
  async updateFile(fileKey, file) {
    try {
      if (!fileKey || !file || !file.buffer) {
        throw new Error('Invalid file key or file object provided.');
      }

      const params = {
        Bucket: this.bucketName,
        Key: fileKey,
        Body: file.buffer,
      };

      const data = await this.s3.upload(params).promise();
      return data.Location; // URL of the updated file
    } catch (error) {
      console.error('Error updating file:', error.message);
      throw error;
    }
  }

  // List all files in the bucket
  async listFiles() {
    try {
      const params = {
        Bucket: this.bucketName,
      };

      const data = await this.s3.listObjectsV2(params).promise();
      return data.Contents.map((file) => ({
        key: file.Key,
        lastModified: file.LastModified,
        size: file.Size,
      }));
    } catch (error) {
      console.error('Error listing files:', error.message);
      throw error;
    }
  }

  // Check if a bucket exists and optionally create it
  async ensureBucketExists() {
    try {
      const buckets = await this.s3.listBuckets().promise();
      const bucketExists = buckets.Buckets.some(
        (bucket) => bucket.Name === this.bucketName
      );

      if (!bucketExists && this.createIfNotExist) {
        const params = { Bucket: this.bucketName };
        await this.s3.createBucket(params).promise();
        console.log(`Bucket "${this.bucketName}" created.`);
      } else if (!bucketExists) {
        throw new Error(`Bucket "${this.bucketName}" does not exist.`);
      }
    } catch (error) {
      console.error('Error ensuring bucket exists:', error.message);
      throw error;
    }
  }

  // Generate a signed URL for temporary access
  async getSignedUrl(fileKey, expiresIn = 3600) {
    try {
      if (!fileKey) {
        throw new Error('Invalid file key provided.');
      }

      const params = {
        Bucket: this.bucketName,
        Key: fileKey,
        Expires: expiresIn, // Default expiration time: 1 hour
      };

      return this.s3.getSignedUrlPromise('getObject', params);
    } catch (error) {
      console.error('Error generating signed URL:', error.message);
      throw error;
    }
  }
}

export default S3Handler;

||------------------------------------------------------||

File: src\utils\hash.util.js
Content:
import { genSalt, hash as _hash, compare } from 'bcryptjs';

const hashPassword = async (password, saltNumber = 10) => {
    const salt = await genSalt(saltNumber);
    return await _hash(password, salt);
};

const comparePassword = async (password, hash) => {
    return await compare(password, hash);
};

export { hashPassword, comparePassword };

||------------------------------------------------------||

File: src\utils\jwt.util.js
Content:
import { sign, verify } from 'jsonwebtoken';
import { JWT_SECRET } from '../config/security.config.js';

const generateToken = (payload, expiresIn = '1h') => {
    return sign(payload, JWT_SECRET, { expiresIn });
};

const verifyToken = (token) => {
    try {
        return verify(token, JWT_SECRET);
    } catch (error) {
        return null;
    }
};

export default { generateToken, verifyToken };

||------------------------------------------------------||

File: src\utils\logger.util.js
Content:
import { createLogger, format as _format, transports as _transports } from "winston";

const logger = (level) => createLogger({
    level: "info",
    format: _format.combine(
        _format.timestamp(),
        _format.json(),
        _format.printf(({ timestamp, level, message }) => {
            return `[${timestamp}] [${level.toUpperCase()}]: ${message}`;
        })
    ),
    transports: [
        new _transports.Console(),
        new _transports.File({ filename: "logs/error.log", level: "error" }),
        new _transports.File({ filename: "logs/combined.log" }),
    ],
});

export default logger;

||------------------------------------------------------||

File: src\utils\object.util.js
Content:
const alterObject = (object, keys) => {
    const newObject = { ...object };
    keys.forEach(key => delete newObject[key]);
    return newObject;
};

||------------------------------------------------------||

File: src\utils\permissions\flags.js
Content:
export const PermissionFLAGS = {
    VIEW_CHANNEL: 1 << 0, // 1
    SEND_MESSAGES: 1 << 1, // 2
    MANAGE_MESSAGES: 1 << 2, // 4
    ADMINISTRATOR: 1 << 3, // 8
    DELETE_MESSAGES: 1 << 4, // 16
    BAN_USERS: 1 << 5, // 32
};

||------------------------------------------------------||

File: src\utils\permissions\permissions.util.js
Content:
import { PermissionFLAGS } from "./flags.js";

class Permissions {

    constructor(permissionNumber = 0) {
        this.permissions = permissionNumber;
    }

    // ✅ تحويل الإدخال (رقم أو اسم) إلى قيمة صحيحة
    static resolvePermissions(input) {
        if (!Array.isArray(input)) input = [input]; // تأكد إنه مصفوفة
        return input
            .map(perm => (typeof perm === "number" ? perm : PermissionFLAGS[perm] || 0))
            .reduce((acc, perm) => acc | perm, 0);
    }

    // ✅ التحقق إذا عنده **كل** الأذونات المطلوبة
    has(...permissions) {
        const checkPerms = Permissions.resolvePermissions(permissions.flat());
        return (this.permissions & checkPerms) === checkPerms;
    }

    // ✅ التحقق إذا عنده **أي** إذن من المجموعة
    any(...permissions) {
        const checkPerms = Permissions.resolvePermissions(permissions.flat());
        return (this.permissions & checkPerms) !== 0;
    }

    // ✅ تعيين الأذونات الجديدة بدل القديمة
    set(...permissions) {
        this.permissions = Permissions.resolvePermissions(permissions.flat());
        return this;
    }

    // ✅ إضافة أذونات متعددة
    add(...permissions) {
        this.permissions |= Permissions.resolvePermissions(permissions.flat());
        return this;
    }

    // ✅ حذف أذونات متعددة
    remove(...permissions) {
        this.permissions &= ~Permissions.resolvePermissions(permissions.flat());
        return this;
    }

    // ✅ إرجاع كل الأذونات في مصفوفة مفهومة
    getPermissionsList() {
        return Object.keys(PermissionFLAGS).filter(
            perm => (this.permissions & PermissionFLAGS[perm]) === PermissionFLAGS[perm]
        );
    }

    // ✅ تحويل مصفوفة أذونات إلى رقم واحد
    static fromArray(permissionsArray) {
        return Permissions.resolvePermissions(permissionsArray);
    }

    // ✅ طباعة الأذونات الحالية (للمساعدة في الديبج)
    toString() {
        return `Permissions: ${this.permissions} (${this.getPermissionsList().join(", ")})`;
    }
}

export default Permissions;

||------------------------------------------------------||

File: src\utils\randomString.util.js
Content:
import { randomBytes } from 'crypto';

const generateRandomString = (length = 32) => {
    return randomBytes(length).toString('hex');
};

export default { generateRandomString };

||------------------------------------------------------||

File: src\utils\responseHandler.util.js
Content:
const successResponse = (res, data, message = 'success', status = 200) => {
    return res.status(status).json({ success: true, message, data });
};

export default { successResponse };

||------------------------------------------------------||

File: src\utils\validators.util.js
Content:
import { object } from 'joi';

const validate = (data, schemaConfig) => {
    if(!schemaConfig) { 
        throw new Error('Schema is required for validation');
    }
    const schema = object(schemaConfig);
    return schema.validate(data);
};

export default { validate };

||------------------------------------------------------||

